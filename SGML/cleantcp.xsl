<?xml version="1.0" encoding="UTF-8"?>
<XSL:stylesheet xmlns:tei="http://www.tei-c.org/ns/1.0"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns:XSL="http://www.w3.org/1999/XSL/Transform"
                exclude-result-prefixes="tei xs"
                version="2.0">
   <XSL:param name="year"/>
   <XSL:template match="*" mode="HEADER">
      <XSL:copy>
         <XSL:apply-templates select="@*|*|processing-instruction()|comment()|text()" mode="HEADER"/>
      </XSL:copy>
   </XSL:template>
   <XSL:template match="FILEDESC/TITLESTMT" mode="HEADER">
      <XSL:copy>
         <XSL:apply-templates select="@*|*|processing-instruction()|comment()|text()" mode="HEADER"/>
      </XSL:copy>
      <XSL:if test="not($year= '')">
         <EDITIONSTMT>
            <EDITION>
               <DATE>
                  <XSL:value-of select="$year"/>
               </DATE>
            </EDITION>
         </EDITIONSTMT>
      </XSL:if>
   </XSL:template>
   <XSL:template match="comment()|processing-instruction()|@*|text" mode="HEADER">
      <XSL:copy-of select="."/>
   </XSL:template>
   <XSL:template match="*">
      <XSL:copy>
         <XSL:apply-templates select="@*|*|processing-instruction()|comment()|text()"/>
      </XSL:copy>
   </XSL:template>
   <XSL:template match="ETS">
      <XSL:copy>
         <XSL:variable name="hfile" select="concat('./',//IDG/@ID,'.hdr')"/>
         <XSL:if test="doc-available(resolve-uri($hfile,base-uri(/*)))">
            <XSL:message> load header <XSL:value-of select="resolve-uri($hfile,base-uri(/*))"/>
            </XSL:message>
            <XSL:apply-templates select="doc(resolve-uri($hfile,base-uri(/*)))/*" mode="HEADER"/>
         </XSL:if>
         <XSL:apply-templates select="*|processing-instruction()|comment()|text()"/>
      </XSL:copy>
   </XSL:template>
   <XSL:template match="GAP/@EXTENT">
      <XSL:attribute name="EXTENT" select="normalize-space(.)"/>
   </XSL:template>
   <XSL:template match="TEXT[not(@LANG)]">
      <XSL:copy>
         <XSL:attribute name="LANG">unk</XSL:attribute>
         <XSL:apply-templates select="@*|*|processing-instruction()|comment()|text()"/>
      </XSL:copy>
   </XSL:template>
   <XSL:template match="comment()|processing-instruction()">
      <XSL:copy-of select="."/>
   </XSL:template>
   <XSL:template match="@*">
      <XSL:attribute name="{name()}">
         <XSL:sequence select="tei:entities(.,false())"/>
      </XSL:attribute>
   </XSL:template>
   <XSL:template match="text()">
      <XSL:sequence select="tei:entities(.,true())"/>
   </XSL:template>
   <XSL:function name="tei:entities">
      <XSL:param name="words"/>
      <XSL:param name="usemarkup"/>
      <XSL:analyze-string select="$words" regex="&amp;([A-z0-9\-]+);">
         <XSL:matching-substring>
            <XSL:choose>
               <XSL:when test="regex-group(1)='brvbar'">¬¶</XSL:when>
               <XSL:when test="regex-group(1)='ballot'">‚òê</XSL:when>
               <XSL:when test="regex-group(1)='music'">‚ô´</XSL:when>
               <XSL:when test="regex-group(1)='spcacute'">¬¥</XSL:when>
               <XSL:when test="regex-group(1)='spcbreve'">Àò</XSL:when>
               <XSL:when test="regex-group(1)='spccaron'">Àá</XSL:when>
               <XSL:when test="regex-group(1)='spccedil'">¬∏</XSL:when>
               <XSL:when test="regex-group(1)='spccirc'">^</XSL:when>
               <XSL:when test="regex-group(1)='spcdblac'">Àù</XSL:when>
               <XSL:when test="regex-group(1)='spcdot'">Àô</XSL:when>
               <XSL:when test="regex-group(1)='spcgrave'">`</XSL:when>
               <XSL:when test="regex-group(1)='spcmacr'">¬Ø</XSL:when>
               <XSL:when test="regex-group(1)='spcogon'">Àõ</XSL:when>
               <XSL:when test="regex-group(1)='spcrcomma'">·øæ</XSL:when>
               <XSL:when test="regex-group(1)='spcring'">Àö</XSL:when>
               <XSL:when test="regex-group(1)='spctilde'">Àú</XSL:when>
               <XSL:when test="regex-group(1)='spcuml'">¬®</XSL:when>
               <XSL:when test="regex-group(1)='cmbAbbrStroke'">
                  <XSL:sequence select="tei:makeG('cmbAbbrStroke','ÃÑ')"/>
               </XSL:when>
               <XSL:when test="regex-group(1)='AElig'">√Ü</XSL:when>
               <XSL:when test="regex-group(1)='Aacugr'">·æª</XSL:when>
               <XSL:when test="regex-group(1)='Aacute'">√Å</XSL:when>
               <XSL:when test="regex-group(1)='Aaigr'">ÓÅø</XSL:when>
               <XSL:when test="regex-group(1)='Abreve'">ƒÇ</XSL:when>
               <XSL:when test="regex-group(1)='Acirc'">√Ç</XSL:when>
               <XSL:when test="regex-group(1)='Acirgr'">ÓÇÑ</XSL:when>
               <XSL:when test="regex-group(1)='Acy'">–ê</XSL:when>
               <XSL:when test="regex-group(1)='Agr'">Œë</XSL:when>
               <XSL:when test="regex-group(1)='Agragr'">·æ∫</XSL:when>
               <XSL:when test="regex-group(1)='Agrave'">√Ä</XSL:when>
               <XSL:when test="regex-group(1)='Aiotgr'">·æº</XSL:when>
               <XSL:when test="regex-group(1)='Amacr'">ƒÄ</XSL:when>
               <XSL:when test="regex-group(1)='Aogon'">ƒÑ</XSL:when>
               <XSL:when test="regex-group(1)='Aquar'">‚ôí</XSL:when>
               <XSL:when test="regex-group(1)='Aragr'">·ºç</XSL:when>
               <XSL:when test="regex-group(1)='Araigr'">·æç</XSL:when>
               <XSL:when test="regex-group(1)='Arcgr'">·ºè</XSL:when>
               <XSL:when test="regex-group(1)='Arcigr'">·æè</XSL:when>
               <XSL:when test="regex-group(1)='Arggr'">·ºã</XSL:when>
               <XSL:when test="regex-group(1)='Argigr'">·æã</XSL:when>
               <XSL:when test="regex-group(1)='Aries'">‚ôà</XSL:when>
               <XSL:when test="regex-group(1)='Arigr'">·æâ</XSL:when>
               <XSL:when test="regex-group(1)='Aring'">√Ö</XSL:when>
               <XSL:when test="regex-group(1)='Arougr'">·ºâ</XSL:when>
               <XSL:when test="regex-group(1)='Asagr'">·ºå</XSL:when>
               <XSL:when test="regex-group(1)='Asaigr'">·æå</XSL:when>
               <XSL:when test="regex-group(1)='Ascgr'">·ºé</XSL:when>
               <XSL:when test="regex-group(1)='Ascigr'">·æé</XSL:when>
               <XSL:when test="regex-group(1)='Asggr'">·ºä</XSL:when>
               <XSL:when test="regex-group(1)='Asgigr'">·æä</XSL:when>
               <XSL:when test="regex-group(1)='Asigr'">·æà</XSL:when>
               <XSL:when test="regex-group(1)='Asmogr'">·ºà</XSL:when>
               <XSL:when test="regex-group(1)='Atilde'">√É</XSL:when>
               <XSL:when test="regex-group(1)='Auml'">√Ñ</XSL:when>
               <XSL:when test="regex-group(1)='Barline'">ùÑÅ</XSL:when>
               <XSL:when test="regex-group(1)='Bcy'">–ë</XSL:when>
               <XSL:when test="regex-group(1)='Bgr'">Œí</XSL:when>
               <XSL:when test="regex-group(1)='CHcy'">–ß</XSL:when>
               <XSL:when test="regex-group(1)='Cacute'">ƒÜ</XSL:when>
               <XSL:when test="regex-group(1)='Cancer'">‚ôã</XSL:when>
               <XSL:when test="regex-group(1)='Capri'">‚ôë</XSL:when>
               <XSL:when test="regex-group(1)='Ccaron'">ƒå</XSL:when>
               <XSL:when test="regex-group(1)='Ccedil'">√á</XSL:when>
               <XSL:when test="regex-group(1)='Ccirc'">ƒà</XSL:when>
               <XSL:when test="regex-group(1)='Cdot'">ƒä</XSL:when>
               <XSL:when test="regex-group(1)='DIGgr'">œú</XSL:when>
               <XSL:when test="regex-group(1)='Dagger'">‚Ä°</XSL:when>
               <XSL:when test="regex-group(1)='Dcaron'">ƒé</XSL:when>
               <XSL:when test="regex-group(1)='Dcy'">–î</XSL:when>
               <XSL:when test="regex-group(1)='Ddotb'">·∏å</XSL:when>
               <XSL:when test="regex-group(1)='Dgr'">Œî</XSL:when>
               <XSL:when test="regex-group(1)='DotDot'">‚Éú</XSL:when>
               <XSL:when test="regex-group(1)='Dstrok'">ƒê</XSL:when>
               <XSL:when test="regex-group(1)='EEacugr'">·øã</XSL:when>
               <XSL:when test="regex-group(1)='EEcirgr'">ÓÇ´</XSL:when>
               <XSL:when test="regex-group(1)='EEgr'">Œó</XSL:when>
               <XSL:when test="regex-group(1)='EEgragr'">·øä</XSL:when>
               <XSL:when test="regex-group(1)='EEiotgr'">·øå</XSL:when>
               <XSL:when test="regex-group(1)='EEragr'">·º≠</XSL:when>
               <XSL:when test="regex-group(1)='EEraigr'">·æù</XSL:when>
               <XSL:when test="regex-group(1)='EErcgr'">·ºØ</XSL:when>
               <XSL:when test="regex-group(1)='EErcigr'">·æü</XSL:when>
               <XSL:when test="regex-group(1)='EErggr'">·º´</XSL:when>
               <XSL:when test="regex-group(1)='EErgigr'">·æõ</XSL:when>
               <XSL:when test="regex-group(1)='EErigr'">·æô</XSL:when>
               <XSL:when test="regex-group(1)='EErougr'">·º©</XSL:when>
               <XSL:when test="regex-group(1)='EEsagr'">·º¨</XSL:when>
               <XSL:when test="regex-group(1)='EEsaigr'">·æú</XSL:when>
               <XSL:when test="regex-group(1)='EEscgr'">·ºÆ</XSL:when>
               <XSL:when test="regex-group(1)='EEscigr'">·æû</XSL:when>
               <XSL:when test="regex-group(1)='EEsggr'">·º™</XSL:when>
               <XSL:when test="regex-group(1)='EEsgigr'">·æö</XSL:when>
               <XSL:when test="regex-group(1)='EEsigr'">·æò</XSL:when>
               <XSL:when test="regex-group(1)='EEsmogr'">·º®</XSL:when>
               <XSL:when test="regex-group(1)='ENG'">≈ä</XSL:when>
               <XSL:when test="regex-group(1)='EOLhyphen'">‚à£</XSL:when>
               <XSL:when test="regex-group(1)='EOLunhyphen'">¬¶</XSL:when>
               <XSL:when test="regex-group(1)='ETH'">√ê</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-BA'">·â†</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-BAA'">·â£</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-BE'">·â•</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-BEE'">·â§</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-BI'">·â¢</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-BO'">·â¶</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-BU'">·â°</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-BWA'">·âß</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-CA'">·â∏</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-CAA'">·âª</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-CE'">·âΩ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-CEE'">·âº</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-CHA'">·å®</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-CHAA'">·å´</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-CHE'">·å≠</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-CHEE'">·å¨</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-CHI'">·å™</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-CHO'">·åÆ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-CHU'">·å©</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-CHWA'">·åØ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-CI'">·â∫</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-CO'">·âæ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-COLON'">·ç•</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-COMMA'">·ç£</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-CU'">·âπ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-CWA'">·âø</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-DA'">·ã∞</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-DAA'">·ã≥</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-DDA'">·ã∏</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-DDAA'">·ãª</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-DDE'">·ãΩ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-DDEE'">·ãº</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-DDI'">·ã∫</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-DDO'">·ãæ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-DDU'">·ãπ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-DDWA'">·ãø</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-DE'">·ãµ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-DEE'">·ã¥</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-DI'">·ã≤</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-DIGIT-EIGHT'">·ç∞</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-DIGIT-FIVE'">·ç≠</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-DIGIT-FOUR'">·ç¨</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-DIGIT-NINE'">·ç±</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-DIGIT-ONE'">·ç©</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-DIGIT-SEVEN'">·çØ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-DIGIT-SIX'">·çÆ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-DIGIT-THREE'">·ç´</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-DIGIT-TWO'">·ç™</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-DO'">·ã∂</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-DU'">·ã±</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-DWA'">·ã∑</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-FA'">·çà</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-FAA'">·çã</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-FE'">·çç</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-FEE'">·çå</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-FI'">·çä</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-FO'">·çé</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-FU'">·çâ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-FWA'">·çè</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-FYA'">·çö</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-GA'">·åà</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-GAA'">·åã</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-GE'">·åç</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-GEE'">·åå</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-GEM-MRK'">·çü</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-GGA'">·åò</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-GGAA'">·åõ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-GGE'">·åù</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-GGEE'">·åú</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-GGI'">·åö</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-GGO'">·åû</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-GGU'">·åô</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-GGWAA'">·åü</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-GI'">·åä</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-GLOTL-A'">·ä†</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-GLOTL-AA'">·ä£</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-GLOTL-E'">·ä•</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-GLOTL-EE'">·ä§</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-GLOTL-I'">·ä¢</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-GLOTL-O'">·ä¶</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-GLOTL-U'">·ä°</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-GLOTL-WA'">·äß</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-GO'">·åé</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-GOA'">·åè</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-GU'">·åâ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-GWA'">·åê</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-GWAA'">·åì</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-GWE'">·åï</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-GWEE'">·åî</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-GWI'">·åí</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-HA'">·àÄ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-HAA'">·àÉ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-HE'">·àÖ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-HEE'">·àÑ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-HHA'">·àê</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-HHAA'">·àì</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-HHE'">·àï</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-HHEE'">·àî</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-HHI'">·àí</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-HHO'">·àñ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-HHU'">·àë</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-HHWA'">·àó</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-HI'">·àÇ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-HO'">·àÜ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-HOA'">·àá</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-HU'">·àÅ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-JA'">·åÄ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-JAA'">·åÉ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-JE'">·åÖ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-JEE'">·åÑ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-JI'">·åÇ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-JO'">·åÜ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-JU'">·åÅ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-JWA'">·åá</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-KA'">·ä®</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-KAA'">·ä´</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-KE'">·ä≠</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-KEE'">·ä¨</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-KI'">·ä™</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-KO'">·äÆ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-KOA'">·äØ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-KU'">·ä©</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-KWA'">·ä∞</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-KWAA'">·ä≥</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-KWE'">·äµ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-KWEE'">·ä¥</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-KWI'">·ä≤</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-KXA'">·ä∏</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-KXAA'">·äª</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-KXE'">·äΩ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-KXEE'">·äº</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-KXI'">·ä∫</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-KXO'">·äæ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-KXU'">·äπ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-KXWA'">·ãÄ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-KXWAA'">·ãÉ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-KXWE'">·ãÖ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-KXWEE'">·ãÑ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-KXWI'">·ãÇ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-LA'">·àà</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-LAA'">·àã</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-LE'">·àç</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-LEE'">·àå</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-LI'">·àä</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-LO'">·àé</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-LU'">·àâ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-LWA'">·àè</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-MA'">·àò</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-MAA'">·àõ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-ME'">·àù</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-MEE'">·àú</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-MI'">·àö</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-MO'">·àû</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-MU'">·àô</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-MWA'">·àü</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-MYA'">·çô</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-NA'">·äê</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-NAA'">·äì</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-NE'">·äï</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-NEE'">·äî</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-NI'">·äí</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-NO'">·äñ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-NU'">·äë</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-NUM-EIGHTY'">·çπ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-NUM-FIFTY'">·ç∂</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-NUM-FORTY'">·çµ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-NUM-HUNDRED'">·çª</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-NUM-NINETY'">·ç∫</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-NUM-SEVENTY'">·ç∏</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-NUM-SIXTY'">·ç∑</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-NUM-TEN'">·ç≤</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-NUM-TEN-THOUSAND'">·çº</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-NUM-THIRTY'">·ç¥</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-NUM-TWENTY'">·ç≥</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-NWA'">·äó</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-NYA'">·äò</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-NYAA'">·äõ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-NYE'">·äù</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-NYEE'">·äú</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-NYI'">·äö</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-NYO'">·äû</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-NYU'">·äô</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-NYWA'">·äü</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-PA'">·çê</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-PAA'">·çì</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-PARAGRAPH'">·ç®</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-PE'">·çï</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-PEE'">·çî</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-PHA'">·å∞</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-PHAA'">·å≥</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-PHARGL-A'">·ãê</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-PHARGL-AA'">·ãì</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-PHARGL-E'">·ãï</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-PHARGL-EE'">·ãî</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-PHARGL-I'">·ãí</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-PHARGL-O'">·ãñ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-PHARGL-U'">·ãë</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-PHE'">·åµ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-PHEE'">·å¥</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-PHI'">·å≤</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-PHO'">·å∂</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-PHU'">·å±</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-PHWA'">·å∑</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-PI'">·çí</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-PO'">·çñ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-PREF-COLON'">·ç¶</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-PU'">·çë</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-PWA'">·çó</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-QA'">·âÄ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-QAA'">·âÉ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-QE'">·âÖ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-QEE'">·âÑ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-QHA'">·âê</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-QHAA'">·âì</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-QHE'">·âï</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-QHEE'">·âî</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-QHI'">·âí</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-QHO'">·âñ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-QHU'">·âë</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-QHWA'">·âò</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-QHWAA'">·âõ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-QHWE'">·âù</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-QHWEE'">·âú</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-QHWI'">·âö</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-QI'">·âÇ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-QO'">·âÜ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-QOA'">·âá</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-QU'">·âÅ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-QUESTION-MRK'">·çß</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-QWA'">·âà</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-QWAA'">·âã</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-QWE'">·âç</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-QWEE'">·âå</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-QWI'">·âä</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-RA'">·à®</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-RAA'">·à´</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-RE'">·à≠</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-REE'">·à¨</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-RI'">·à™</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-RO'">·àÆ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-RU'">·à©</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-RWA'">·àØ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-RYA'">·çò</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-SA'">·à∞</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-SAA'">·à≥</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-SE'">·àµ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-SECTION-MRK'">·ç†</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-SEE'">·à¥</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-SEMICOLON'">·ç§</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-SHA'">·à∏</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-SHAA'">·àª</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-SHE'">·àΩ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-SHEE'">·àº</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-SHI'">·à∫</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-SHO'">·àæ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-SHU'">·àπ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-SHWA'">·àø</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-SI'">·à≤</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-SO'">·à∂</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-STOP'">·ç¢</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-SU'">·à±</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-SWA'">·à∑</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-SZA'">·à†</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-SZAA'">·à£</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-SZE'">·à•</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-SZEE'">·à§</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-SZI'">·à¢</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-SZO'">·à¶</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-SZU'">·à°</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-SZWA'">·àß</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-TA'">·â∞</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-TAA'">·â≥</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-TE'">·âµ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-TEE'">·â¥</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-THA'">·å†</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-THAA'">·å£</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-THE'">·å•</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-THEE'">·å§</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-THI'">·å¢</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-THO'">·å¶</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-THU'">·å°</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-THWA'">·åß</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-TI'">·â≤</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-TO'">·â∂</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-TSA'">·å∏</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-TSAA'">·åª</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-TSE'">·åΩ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-TSEE'">·åº</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-TSI'">·å∫</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-TSO'">·åæ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-TSU'">·åπ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-TSWA'">·åø</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-TU'">·â±</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-TWA'">·â∑</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-TZA'">·çÄ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-TZAA'">·çÉ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-TZE'">·çÖ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-TZEE'">·çÑ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-TZI'">·çÇ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-TZO'">·çÜ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-TZOA'">·çá</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-TZU'">·çÅ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-VA'">·â®</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-VAA'">·â´</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-VE'">·â≠</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-VEE'">·â¨</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-VI'">·â™</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-VO'">·âÆ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-VU'">·â©</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-VWA'">·âØ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-WA'">·ãà</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-WAA'">·ãã</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-WE'">·ãç</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-WEE'">·ãå</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-WI'">·ãä</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-WO'">·ãé</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-WOA'">·ãè</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-WORDSPACE'">·ç°</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-WU'">·ãâ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-XA'">·äÄ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-XAA'">·äÉ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-XE'">·äÖ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-XEE'">·äÑ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-XI'">·äÇ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-XO'">·äÜ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-XOA'">·äá</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-XU'">·äÅ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-XWA'">·äà</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-XWAA'">·äã</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-XWE'">·äç</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-XWEE'">·äå</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-XWI'">·ää</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-YA'">·ã®</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-YAA'">·ã´</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-YE'">·ã≠</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-YEE'">·ã¨</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-YI'">·ã™</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-YO'">·ãÆ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-YOA'">·ãØ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-YU'">·ã©</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-ZA'">·ãò</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-ZAA'">·ãõ</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-ZE'">·ãù</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-ZEE'">·ãú</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-ZHA'">·ã†</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-ZHAA'">·ã£</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-ZHE'">·ã•</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-ZHEE'">·ã§</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-ZHI'">·ã¢</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-ZHO'">·ã¶</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-ZHU'">·ã°</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-ZHWA'">·ãß</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-ZI'">·ãö</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-ZO'">·ãû</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-ZU'">·ãô</XSL:when>
               <XSL:when test="regex-group(1)='ETHIOPIC-ZWA'">·ãü</XSL:when>
               <XSL:when test="regex-group(1)='Eacugr'">·øâ</XSL:when>
               <XSL:when test="regex-group(1)='Eacute'">√â</XSL:when>
               <XSL:when test="regex-group(1)='Earth'">‚ôÅ</XSL:when>
               <XSL:when test="regex-group(1)='Ecaron'">ƒö</XSL:when>
               <XSL:when test="regex-group(1)='Ecirc'">√ä</XSL:when>
               <XSL:when test="regex-group(1)='Ecy'">–≠</XSL:when>
               <XSL:when test="regex-group(1)='Edot'">ƒñ</XSL:when>
               <XSL:when test="regex-group(1)='Egr'">Œï</XSL:when>
               <XSL:when test="regex-group(1)='Egragr'">·øà</XSL:when>
               <XSL:when test="regex-group(1)='Egrave'">√à</XSL:when>
               <XSL:when test="regex-group(1)='Emacr'">ƒí</XSL:when>
               <XSL:when test="regex-group(1)='Eogon'">ƒò</XSL:when>
               <XSL:when test="regex-group(1)='Eragr'">·ºù</XSL:when>
               <XSL:when test="regex-group(1)='Erggr'">·ºõ</XSL:when>
               <XSL:when test="regex-group(1)='Erougr'">·ºô</XSL:when>
               <XSL:when test="regex-group(1)='Esagr'">·ºú</XSL:when>
               <XSL:when test="regex-group(1)='Esggr'">·ºö</XSL:when>
               <XSL:when test="regex-group(1)='Esmogr'">·ºò</XSL:when>
               <XSL:when test="regex-group(1)='Euml'">√ã</XSL:when>
               <XSL:when test="regex-group(1)='Fcy'">–§</XSL:when>
               <XSL:when test="regex-group(1)='Gbreve'">ƒû</XSL:when>
               <XSL:when test="regex-group(1)='Gcedil'">ƒ¢</XSL:when>
               <XSL:when test="regex-group(1)='Gcirc'">ƒú</XSL:when>
               <XSL:when test="regex-group(1)='Gcy'">–ì</XSL:when>
               <XSL:when test="regex-group(1)='Gdot'">ƒ†</XSL:when>
               <XSL:when test="regex-group(1)='Gemini'">‚ôä</XSL:when>
               <XSL:when test="regex-group(1)='Ggr'">Œì</XSL:when>
               <XSL:when test="regex-group(1)='Ghacek'">«¶</XSL:when>
               <XSL:when test="regex-group(1)='HARDcy'">–™</XSL:when>
               <XSL:when test="regex-group(1)='Hcirc'">ƒ§</XSL:when>
               <XSL:when test="regex-group(1)='Hstrok'">ƒ¶</XSL:when>
               <XSL:when test="regex-group(1)='IEcy'">–ï</XSL:when>
               <XSL:when test="regex-group(1)='IJlig'">ƒ≤</XSL:when>
               <XSL:when test="regex-group(1)='IOcy'">–Å</XSL:when>
               <XSL:when test="regex-group(1)='Iacugr'">·øõ</XSL:when>
               <XSL:when test="regex-group(1)='Iacute'">√ç</XSL:when>
               <XSL:when test="regex-group(1)='Ibreve'">ƒ¨</XSL:when>
               <XSL:when test="regex-group(1)='Icirc'">√é</XSL:when>
               <XSL:when test="regex-group(1)='Icy'">–ò</XSL:when>
               <XSL:when test="regex-group(1)='Idot'">ƒ∞</XSL:when>
               <XSL:when test="regex-group(1)='Igr'">Œô</XSL:when>
               <XSL:when test="regex-group(1)='Igragr'">·øö</XSL:when>
               <XSL:when test="regex-group(1)='Igrave'">√å</XSL:when>
               <XSL:when test="regex-group(1)='Imacr'">ƒ™</XSL:when>
               <XSL:when test="regex-group(1)='Iogon'">ƒÆ</XSL:when>
               <XSL:when test="regex-group(1)='Iragr'">·ºΩ</XSL:when>
               <XSL:when test="regex-group(1)='Ircgr'">·ºø</XSL:when>
               <XSL:when test="regex-group(1)='Irggr'">·ºª</XSL:when>
               <XSL:when test="regex-group(1)='Irougr'">·ºπ</XSL:when>
               <XSL:when test="regex-group(1)='Isagr'">·ºº</XSL:when>
               <XSL:when test="regex-group(1)='Iscgr'">·ºæ</XSL:when>
               <XSL:when test="regex-group(1)='Isggr'">·º∫</XSL:when>
               <XSL:when test="regex-group(1)='Ismogr'">·º∏</XSL:when>
               <XSL:when test="regex-group(1)='Itilde'">ƒ®</XSL:when>
               <XSL:when test="regex-group(1)='Iuml'">√è</XSL:when>
               <XSL:when test="regex-group(1)='Jcirc'">ƒ¥</XSL:when>
               <XSL:when test="regex-group(1)='Jcy'">–ô</XSL:when>
               <XSL:when test="regex-group(1)='Jupit'">‚ôÉ</XSL:when>
               <XSL:when test="regex-group(1)='KHcy'">–•</XSL:when>
               <XSL:when test="regex-group(1)='KHgr'">Œß</XSL:when>
               <XSL:when test="regex-group(1)='KOgr'">œû</XSL:when>
               <XSL:when test="regex-group(1)='Kcedil'">ƒ∂</XSL:when>
               <XSL:when test="regex-group(1)='Kcy'">–ö</XSL:when>
               <XSL:when test="regex-group(1)='Kgr'">Œö</XSL:when>
               <XSL:when test="regex-group(1)='LL'">·ª∫</XSL:when>
               <XSL:when test="regex-group(1)='Lacute'">ƒπ</XSL:when>
               <XSL:when test="regex-group(1)='Lbar'">‚±¢</XSL:when>
               <XSL:when test="regex-group(1)='Lcaron'">ƒΩ</XSL:when>
               <XSL:when test="regex-group(1)='Lcedil'">ƒª</XSL:when>
               <XSL:when test="regex-group(1)='Lcy'">–õ</XSL:when>
               <XSL:when test="regex-group(1)='Ldotb'">·∏∂</XSL:when>
               <XSL:when test="regex-group(1)='Leo'">‚ôå</XSL:when>
               <XSL:when test="regex-group(1)='Lgr'">Œõ</XSL:when>
               <XSL:when test="regex-group(1)='Libra'">‚ôé</XSL:when>
               <XSL:when test="regex-group(1)='Lmidot'">ƒø</XSL:when>
               <XSL:when test="regex-group(1)='Lstrok'">≈Å</XSL:when>
               <XSL:when test="regex-group(1)='Mars'">‚ôÇ</XSL:when>
               <XSL:when test="regex-group(1)='Mcy'">–ú</XSL:when>
               <XSL:when test="regex-group(1)='Merc'">‚òø</XSL:when>
               <XSL:when test="regex-group(1)='Mgr'">Œú</XSL:when>
               <XSL:when test="regex-group(1)='Moonfirst'">‚òΩ</XSL:when>
               <XSL:when test="regex-group(1)='Moonlast'">‚òæ</XSL:when>
               <XSL:when test="regex-group(1)='Nacute'">≈É</XSL:when>
               <XSL:when test="regex-group(1)='Ncaron'">≈á</XSL:when>
               <XSL:when test="regex-group(1)='Ncedil'">≈Ö</XSL:when>
               <XSL:when test="regex-group(1)='Ncy'">–ù</XSL:when>
               <XSL:when test="regex-group(1)='Ngr'">Œù</XSL:when>
               <XSL:when test="regex-group(1)='Ntilde'">√ë</XSL:when>
               <XSL:when test="regex-group(1)='OElig'">≈í</XSL:when>
               <XSL:when test="regex-group(1)='OHacugr'">·øª</XSL:when>
               <XSL:when test="regex-group(1)='OHcirgr'">ÓÇµ</XSL:when>
               <XSL:when test="regex-group(1)='OHgr'">Œ©</XSL:when>
               <XSL:when test="regex-group(1)='OHgragr'">·ø∫</XSL:when>
               <XSL:when test="regex-group(1)='OHigr'">·øº</XSL:when>
               <XSL:when test="regex-group(1)='OHragr'">·Ω≠</XSL:when>
               <XSL:when test="regex-group(1)='OHraigr'">·æ≠</XSL:when>
               <XSL:when test="regex-group(1)='OHrcgr'">·ΩØ</XSL:when>
               <XSL:when test="regex-group(1)='OHrcigr'">·æØ</XSL:when>
               <XSL:when test="regex-group(1)='OHrggr'">·Ω´</XSL:when>
               <XSL:when test="regex-group(1)='OHrgigr'">·æ´</XSL:when>
               <XSL:when test="regex-group(1)='OHrigr'">·æ©</XSL:when>
               <XSL:when test="regex-group(1)='OHrougr'">·Ω©</XSL:when>
               <XSL:when test="regex-group(1)='OHsagr'">·Ω¨</XSL:when>
               <XSL:when test="regex-group(1)='OHsaigr'">·æ¨</XSL:when>
               <XSL:when test="regex-group(1)='OHscgr'">·ΩÆ</XSL:when>
               <XSL:when test="regex-group(1)='OHscigr'">·æÆ</XSL:when>
               <XSL:when test="regex-group(1)='OHsggr'">·Ω™</XSL:when>
               <XSL:when test="regex-group(1)='OHsgigr'">·æ™</XSL:when>
               <XSL:when test="regex-group(1)='OHsigr'">·æ®</XSL:when>
               <XSL:when test="regex-group(1)='OHsmogr'">·Ω®</XSL:when>
               <XSL:when test="regex-group(1)='Oacugr'">·øπ</XSL:when>
               <XSL:when test="regex-group(1)='Oacute'">√ì</XSL:when>
               <XSL:when test="regex-group(1)='Ocirc'">√î</XSL:when>
               <XSL:when test="regex-group(1)='Ocy'">–û</XSL:when>
               <XSL:when test="regex-group(1)='Odblac'">≈ê</XSL:when>
               <XSL:when test="regex-group(1)='Ogr'">Œü</XSL:when>
               <XSL:when test="regex-group(1)='Ogragr'">·ø∏</XSL:when>
               <XSL:when test="regex-group(1)='Ograve'">√í</XSL:when>
               <XSL:when test="regex-group(1)='Omacr'">≈å</XSL:when>
               <XSL:when test="regex-group(1)='Oragr'">·Ωç</XSL:when>
               <XSL:when test="regex-group(1)='Orggr'">·Ωã</XSL:when>
               <XSL:when test="regex-group(1)='Orougr'">·Ωâ</XSL:when>
               <XSL:when test="regex-group(1)='Osagr'">·Ωå</XSL:when>
               <XSL:when test="regex-group(1)='Osggr'">·Ωä</XSL:when>
               <XSL:when test="regex-group(1)='Oslash'">√ò</XSL:when>
               <XSL:when test="regex-group(1)='Osmogr'">·Ωà</XSL:when>
               <XSL:when test="regex-group(1)='Otilde'">√ï</XSL:when>
               <XSL:when test="regex-group(1)='Ouml'">√ñ</XSL:when>
               <XSL:when test="regex-group(1)='PHgr'">Œ¶</XSL:when>
               <XSL:when test="regex-group(1)='PSgr'">Œ®</XSL:when>
               <XSL:when test="regex-group(1)='Pcy'">–ü</XSL:when>
               <XSL:when test="regex-group(1)='Pgr'">Œ†</XSL:when>
               <XSL:when test="regex-group(1)='Pisces'">‚ôì</XSL:when>
               <XSL:when test="regex-group(1)='Prime'">‚Ä≥</XSL:when>
               <XSL:when test="regex-group(1)='Qbar'">Íùñ</XSL:when>
               <XSL:when test="regex-group(1)='R'">Íùö</XSL:when>
               <XSL:when test="regex-group(1)='Racute'">≈î</XSL:when>
               <XSL:when test="regex-group(1)='Rcaron'">≈ò</XSL:when>
               <XSL:when test="regex-group(1)='Rcedil'">≈ñ</XSL:when>
               <XSL:when test="regex-group(1)='Rcy'">–†</XSL:when>
               <XSL:when test="regex-group(1)='Rgr'">Œ°</XSL:when>
               <XSL:when test="regex-group(1)='Rrougr'">·ø¨</XSL:when>
               <XSL:when test="regex-group(1)='SAMgr'">œ†</XSL:when>
               <XSL:when test="regex-group(1)='SHCHcy'">–©</XSL:when>
               <XSL:when test="regex-group(1)='SHcy'">–®</XSL:when>
               <XSL:when test="regex-group(1)='SOFTcy'">–¨</XSL:when>
               <XSL:when test="regex-group(1)='STgr'">œö</XSL:when>
               <XSL:when test="regex-group(1)='Sacute'">≈ö</XSL:when>
               <XSL:when test="regex-group(1)='Sagitt'">‚ôê</XSL:when>
               <XSL:when test="regex-group(1)='Saturn'">‚ôÑ</XSL:when>
               <XSL:when test="regex-group(1)='Scaron'">≈†</XSL:when>
               <XSL:when test="regex-group(1)='Scedil'">≈û</XSL:when>
               <XSL:when test="regex-group(1)='Scirc'">≈ú</XSL:when>
               <XSL:when test="regex-group(1)='Scorp'">‚ôè</XSL:when>
               <XSL:when test="regex-group(1)='Scy'">–°</XSL:when>
               <XSL:when test="regex-group(1)='Sgr'">Œ£</XSL:when>
               <XSL:when test="regex-group(1)='Slungr'">œπ</XSL:when>
               <XSL:when test="regex-group(1)='Sun'">‚òâ</XSL:when>
               <XSL:when test="regex-group(1)='THAT'">Íù¶</XSL:when>
               <XSL:when test="regex-group(1)='THORN'">√û</XSL:when>
               <XSL:when test="regex-group(1)='THgr'">Œò</XSL:when>
               <XSL:when test="regex-group(1)='TScy'">–¶</XSL:when>
               <XSL:when test="regex-group(1)='Taurus'">‚ôâ</XSL:when>
               <XSL:when test="regex-group(1)='Tcaron'">≈§</XSL:when>
               <XSL:when test="regex-group(1)='Tcedil'">≈¢</XSL:when>
               <XSL:when test="regex-group(1)='Tcy'">–¢</XSL:when>
               <XSL:when test="regex-group(1)='Tgr'">Œ§</XSL:when>
               <XSL:when test="regex-group(1)='Tstrok'">≈¶</XSL:when>
               <XSL:when test="regex-group(1)='Uacugr'">·ø´</XSL:when>
               <XSL:when test="regex-group(1)='Uacute'">√ö</XSL:when>
               <XSL:when test="regex-group(1)='Ubreve'">≈¨</XSL:when>
               <XSL:when test="regex-group(1)='Ucirc'">√õ</XSL:when>
               <XSL:when test="regex-group(1)='Ucirgr'">ÓÄø</XSL:when>
               <XSL:when test="regex-group(1)='Ucy'">–£</XSL:when>
               <XSL:when test="regex-group(1)='Udblac'">≈∞</XSL:when>
               <XSL:when test="regex-group(1)='Udotb'">·ª§</XSL:when>
               <XSL:when test="regex-group(1)='Ugr'">Œ•</XSL:when>
               <XSL:when test="regex-group(1)='Ugragr'">·ø™</XSL:when>
               <XSL:when test="regex-group(1)='Ugrave'">√ô</XSL:when>
               <XSL:when test="regex-group(1)='Umacr'">≈™</XSL:when>
               <XSL:when test="regex-group(1)='Uogon'">≈≤</XSL:when>
               <XSL:when test="regex-group(1)='Uragr'">·Ωù</XSL:when>
               <XSL:when test="regex-group(1)='Urcgr'">·Ωü</XSL:when>
               <XSL:when test="regex-group(1)='Urggr'">·Ωõ</XSL:when>
               <XSL:when test="regex-group(1)='Uring'">≈Æ</XSL:when>
               <XSL:when test="regex-group(1)='Urougr'">·Ωô</XSL:when>
               <XSL:when test="regex-group(1)='Utilde'">≈®</XSL:when>
               <XSL:when test="regex-group(1)='Uuml'">√ú</XSL:when>
               <XSL:when test="regex-group(1)='Vcy'">–í</XSL:when>
               <XSL:when test="regex-group(1)='Venus'">‚ôÄ</XSL:when>
               <XSL:when test="regex-group(1)='Verbar'">‚Äñ</XSL:when>
               <XSL:when test="regex-group(1)='Virgo'">‚ôç</XSL:when>
               <XSL:when test="regex-group(1)='Vstroke'">Íùû</XSL:when>
               <XSL:when test="regex-group(1)='W'">·ªº</XSL:when>
               <XSL:when test="regex-group(1)='WYN'">«∑</XSL:when>
               <XSL:when test="regex-group(1)='Wcirc'">≈¥</XSL:when>
               <XSL:when test="regex-group(1)='Xbar'">êÜñ</XSL:when>
               <XSL:when test="regex-group(1)='Xgr'">Œû</XSL:when>
               <XSL:when test="regex-group(1)='Y'">·ªæ</XSL:when>
               <XSL:when test="regex-group(1)='YAcy'">–Ø</XSL:when>
               <XSL:when test="regex-group(1)='YOGH'">»ú</XSL:when>
               <XSL:when test="regex-group(1)='YUcy'">–Æ</XSL:when>
               <XSL:when test="regex-group(1)='Yacute'">√ù</XSL:when>
               <XSL:when test="regex-group(1)='Ycirc'">≈∂</XSL:when>
               <XSL:when test="regex-group(1)='Ycy'">–´</XSL:when>
               <XSL:when test="regex-group(1)='Yhook'">∆≥</XSL:when>
               <XSL:when test="regex-group(1)='Yuml'">≈∏</XSL:when>
               <XSL:when test="regex-group(1)='ZHcy'">–ñ</XSL:when>
               <XSL:when test="regex-group(1)='Zacute'">≈π</XSL:when>
               <XSL:when test="regex-group(1)='Zcaron'">≈Ω</XSL:when>
               <XSL:when test="regex-group(1)='Zcy'">–ó</XSL:when>
               <XSL:when test="regex-group(1)='Zdot'">≈ª</XSL:when>
               <XSL:when test="regex-group(1)='Zgr'">Œñ</XSL:when>
               <XSL:when test="regex-group(1)='aacugr'">·Ω±</XSL:when>
               <XSL:when test="regex-group(1)='aacute'">√°</XSL:when>
               <XSL:when test="regex-group(1)='aaigr'">·æ¥</XSL:when>
               <XSL:when test="regex-group(1)='abCON'">ÍùÆ</XSL:when>
               <XSL:when test="regex-group(1)='abPER'">Íùê</XSL:when>
               <XSL:when test="regex-group(1)='abPRO'">Íùí</XSL:when>
               <XSL:when test="regex-group(1)='abQUOD'">Íùò</XSL:when>
               <XSL:when test="regex-group(1)='abRUM'">Íù∂</XSL:when>
               <XSL:when test="regex-group(1)='abcon'">ÍùØ</XSL:when>
               <XSL:when test="regex-group(1)='abis'">Íù≠</XSL:when>
               <XSL:when test="regex-group(1)='abper'">Íùë</XSL:when>
               <XSL:when test="regex-group(1)='abpr'">‚Öå</XSL:when>
               <XSL:when test="regex-group(1)='abprecipi'">üùü</XSL:when>
               <XSL:when test="regex-group(1)='abpro'">Íùì</XSL:when>
               <XSL:when test="regex-group(1)='abquod'">Íùô</XSL:when>
               <XSL:when test="regex-group(1)='abreve'">ƒÉ</XSL:when>
               <XSL:when test="regex-group(1)='absubli'">üùû</XSL:when>
               <XSL:when test="regex-group(1)='abus'">Íù∞</XSL:when>
               <XSL:when test="regex-group(1)='acigr'">·æ∑</XSL:when>
               <XSL:when test="regex-group(1)='acirc'">√¢</XSL:when>
               <XSL:when test="regex-group(1)='acirgr'">·æ∂</XSL:when>
               <XSL:when test="regex-group(1)='acy'">–∞</XSL:when>
               <XSL:when test="regex-group(1)='aelig'">√¶</XSL:when>
               <XSL:when test="regex-group(1)='afortis'">üúÖ</XSL:when>
               <XSL:when test="regex-group(1)='agigr'">·æ≤</XSL:when>
               <XSL:when test="regex-group(1)='agr'">Œ±</XSL:when>
               <XSL:when test="regex-group(1)='agragr'">·Ω∞</XSL:when>
               <XSL:when test="regex-group(1)='agrave'">√†</XSL:when>
               <XSL:when test="regex-group(1)='ahacek'">«é</XSL:when>
               <XSL:when test="regex-group(1)='aiotgr'">·æ≥</XSL:when>
               <XSL:when test="regex-group(1)='air'">üúÅ</XSL:when>
               <XSL:when test="regex-group(1)='alef'">◊ê</XSL:when>
               <XSL:when test="regex-group(1)='alembic'">üù™</XSL:when>
               <XSL:when test="regex-group(1)='aleph'">‚Ñµ</XSL:when>
               <XSL:when test="regex-group(1)='amacr'">ƒÅ</XSL:when>
               <XSL:when test="regex-group(1)='anchor'">‚öì</XSL:when>
               <XSL:when test="regex-group(1)='and'">‚àß</XSL:when>
               <XSL:when test="regex-group(1)='ang'">‚à†</XSL:when>
               <XSL:when test="regex-group(1)='ang90'">‚àü</XSL:when>
               <XSL:when test="regex-group(1)='angsph'">‚à¢</XSL:when>
               <XSL:when test="regex-group(1)='angst'">‚Ñ´</XSL:when>
               <XSL:when test="regex-group(1)='aogon'">ƒÖ</XSL:when>
               <XSL:when test="regex-group(1)='ap'">‚âà</XSL:when>
               <XSL:when test="regex-group(1)='arab-qaf'">ŸØ</XSL:when>
               <XSL:when test="regex-group(1)='aragr'">·ºÖ</XSL:when>
               <XSL:when test="regex-group(1)='araigr'">·æÖ</XSL:when>
               <XSL:when test="regex-group(1)='arc'">ÓÅá</XSL:when>
               <XSL:when test="regex-group(1)='arcgr'">·ºá</XSL:when>
               <XSL:when test="regex-group(1)='arcigr'">·æá</XSL:when>
               <XSL:when test="regex-group(1)='aregis'">üúÜ</XSL:when>
               <XSL:when test="regex-group(1)='arggr'">·ºÉ</XSL:when>
               <XSL:when test="regex-group(1)='argigr'">·æÉ</XSL:when>
               <XSL:when test="regex-group(1)='arigr'">·æÅ</XSL:when>
               <XSL:when test="regex-group(1)='aring'">√•</XSL:when>
               <XSL:when test="regex-group(1)='arougr'">·ºÅ</XSL:when>
               <XSL:when test="regex-group(1)='arsenic'">üú∫</XSL:when>
               <XSL:when test="regex-group(1)='asagr'">·ºÑ</XSL:when>
               <XSL:when test="regex-group(1)='asaigr'">·æÑ</XSL:when>
               <XSL:when test="regex-group(1)='ascgr'">·ºÜ</XSL:when>
               <XSL:when test="regex-group(1)='ascigr'">·æÜ</XSL:when>
               <XSL:when test="regex-group(1)='asggr'">·ºÇ</XSL:when>
               <XSL:when test="regex-group(1)='asgigr'">·æÇ</XSL:when>
               <XSL:when test="regex-group(1)='ashes'">üùó</XSL:when>
               <XSL:when test="regex-group(1)='asigr'">·æÄ</XSL:when>
               <XSL:when test="regex-group(1)='asmogr'">·ºÄ</XSL:when>
               <XSL:when test="regex-group(1)='ast'">*</XSL:when>
               <XSL:when test="regex-group(1)='atilde'">√£</XSL:when>
               <XSL:when test="regex-group(1)='auml'">√§</XSL:when>
               <XSL:when test="regex-group(1)='ayin'">◊¢</XSL:when>
               <XSL:when test="regex-group(1)='barline'">ùÑÄ</XSL:when>
               <XSL:when test="regex-group(1)='bcy'">–±</XSL:when>
               <XSL:when test="regex-group(1)='becaus'">‚àµ</XSL:when>
               <XSL:when test="regex-group(1)='bernou'">‚Ñ¨</XSL:when>
               <XSL:when test="regex-group(1)='bet'">◊ë</XSL:when>
               <XSL:when test="regex-group(1)='bgr'">Œ≤</XSL:when>
               <XSL:when test="regex-group(1)='biglsquo'">‚ùõ</XSL:when>
               <XSL:when test="regex-group(1)='blank'">‚ê£</XSL:when>
               <XSL:when test="regex-group(1)='blk12'">‚ñí</XSL:when>
               <XSL:when test="regex-group(1)='blk14'">‚ñë</XSL:when>
               <XSL:when test="regex-group(1)='blk34'">‚ñì</XSL:when>
               <XSL:when test="regex-group(1)='block'">‚ñà</XSL:when>
               <XSL:when test="regex-group(1)='bsol'">\</XSL:when>
               <XSL:when test="regex-group(1)='bstrok'">∆Ä</XSL:when>
               <XSL:when test="regex-group(1)='bull'">‚Ä¢</XSL:when>
               <XSL:when test="regex-group(1)='cacute'">ƒá</XSL:when>
               <XSL:when test="regex-group(1)='cap'">‚à©</XSL:when>
               <XSL:when test="regex-group(1)='caret'">‚ÅÅ</XSL:when>
               <XSL:when test="regex-group(1)='ccaron'">ƒç</XSL:when>
               <XSL:when test="regex-group(1)='ccedil'">√ß</XSL:when>
               <XSL:when test="regex-group(1)='ccirc'">ƒâ</XSL:when>
               <XSL:when test="regex-group(1)='cclef'">ùÑ°</XSL:when>
               <XSL:when test="regex-group(1)='cdot'">ƒã</XSL:when>
               <XSL:when test="regex-group(1)='cent'">¬¢</XSL:when>
               <XSL:when test="regex-group(1)='chcy'">—á</XSL:when>
               <XSL:when test="regex-group(1)='check'">‚úì</XSL:when>
               <XSL:when test="regex-group(1)='chirho'">‚òß</XSL:when>
               <XSL:when test="regex-group(1)='cinnabar1'">üúì</XSL:when>
               <XSL:when test="regex-group(1)='cinnabar3'">üú≠</XSL:when>
               <XSL:when test="regex-group(1)='cir'">‚óã</XSL:when>
               <XSL:when test="regex-group(1)='circle'">‚óØ</XSL:when>
               <XSL:when test="regex-group(1)='circled-0'">‚ì™</XSL:when>
               <XSL:when test="regex-group(1)='circled-1'">‚ë†</XSL:when>
               <XSL:when test="regex-group(1)='circled-10'">‚ë©</XSL:when>
               <XSL:when test="regex-group(1)='circled-11'">‚ë™</XSL:when>
               <XSL:when test="regex-group(1)='circled-12'">‚ë´</XSL:when>
               <XSL:when test="regex-group(1)='circled-2'">‚ë°</XSL:when>
               <XSL:when test="regex-group(1)='circled-3'">‚ë¢</XSL:when>
               <XSL:when test="regex-group(1)='circled-4'">‚ë£</XSL:when>
               <XSL:when test="regex-group(1)='circled-5'">‚ë§</XSL:when>
               <XSL:when test="regex-group(1)='circled-6'">‚ë•</XSL:when>
               <XSL:when test="regex-group(1)='circled-7'">‚ë¶</XSL:when>
               <XSL:when test="regex-group(1)='circled-8'">‚ëß</XSL:when>
               <XSL:when test="regex-group(1)='circled-9'">‚ë®</XSL:when>
               <XSL:when test="regex-group(1)='circledplus'">‚äï</XSL:when>
               <XSL:when test="regex-group(1)='circledtimes'">‚äó</XSL:when>
               <XSL:when test="regex-group(1)='closeup'">‚Åê</XSL:when>
               <XSL:when test="regex-group(1)='clubs'">‚ô£</XSL:when>
               <XSL:when test="regex-group(1)='cmacr'">ÓÄÄ</XSL:when>
               <XSL:when test="regex-group(1)='cmbSTROKEover'">Ã∂</XSL:when>
               <XSL:when test="regex-group(1)='cmbVIRGULEover'">Ã∏</XSL:when>
               <XSL:when test="regex-group(1)='cmbVLINEover'">‚Éí</XSL:when>
               <XSL:when test="regex-group(1)='cmba2a'">·∑û</XSL:when>
               <XSL:when test="regex-group(1)='cmbaa'">Õ£</XSL:when>
               <XSL:when test="regex-group(1)='cmbacute'">ÃÅ</XSL:when>
               <XSL:when test="regex-group(1)='cmbbreve'">ÃÜ</XSL:when>
               <XSL:when test="regex-group(1)='cmbbslashover'">‚É•</XSL:when>
               <XSL:when test="regex-group(1)='cmbcaron'">Ãå</XSL:when>
               <XSL:when test="regex-group(1)='cmbcedil'">Ãß</XSL:when>
               <XSL:when test="regex-group(1)='cmbcirc'">ÃÇ</XSL:when>
               <XSL:when test="regex-group(1)='cmbcommaa'">Ãì</XSL:when>
               <XSL:when test="regex-group(1)='cmbdblac'">Ãã</XSL:when>
               <XSL:when test="regex-group(1)='cmbdblvlineover'">‚É¶</XSL:when>
               <XSL:when test="regex-group(1)='cmbdot'">Ãá</XSL:when>
               <XSL:when test="regex-group(1)='cmbdotb'">Ã£</XSL:when>
               <XSL:when test="regex-group(1)='cmbenclcirover'">‚Éù</XSL:when>
               <XSL:when test="regex-group(1)='cmbenclsquover'">‚Éû</XSL:when>
               <XSL:when test="regex-group(1)='cmbencltriover'">‚É§</XSL:when>
               <XSL:when test="regex-group(1)='cmbgrave'">ÃÄ</XSL:when>
               <XSL:when test="regex-group(1)='cmbia'">Õ•</XSL:when>
               <XSL:when test="regex-group(1)='cmbibreve'">Ãë</XSL:when>
               <XSL:when test="regex-group(1)='cmblowvertline'">Ã©</XSL:when>
               <XSL:when test="regex-group(1)='cmbmacr'">ÃÑ</XSL:when>
               <XSL:when test="regex-group(1)='cmbogon'">Ã®</XSL:when>
               <XSL:when test="regex-group(1)='cmbogona'">·∑é</XSL:when>
               <XSL:when test="regex-group(1)='cmbperispo'">ÕÇ</XSL:when>
               <XSL:when test="regex-group(1)='cmbrcomma'">Ãî</XSL:when>
               <XSL:when test="regex-group(1)='cmbring'">Ãä</XSL:when>
               <XSL:when test="regex-group(1)='cmbstrokeover'">Ãµ</XSL:when>
               <XSL:when test="regex-group(1)='cmbtilde'">ÃÉ</XSL:when>
               <XSL:when test="regex-group(1)='cmbtildeover'">Ã¥</XSL:when>
               <XSL:when test="regex-group(1)='cmbuml'">Ãà</XSL:when>
               <XSL:when test="regex-group(1)='cmbvirguleover'">Ã∑</XSL:when>
               <XSL:when test="regex-group(1)='cmbvlineover'">‚Éì</XSL:when>
               <XSL:when test="regex-group(1)='cmbx'">ÃΩ</XSL:when>
               <XSL:when test="regex-group(1)='colon'">:</XSL:when>
               <XSL:when test="regex-group(1)='comma'">,</XSL:when>
               <XSL:when test="regex-group(1)='commat'">@</XSL:when>
               <XSL:when test="regex-group(1)='commonTime-adagio'">ùÑ¥</XSL:when>
               <XSL:when test="regex-group(1)='compfn'">‚àò</XSL:when>
               <XSL:when test="regex-group(1)='cong'">‚âÖ</XSL:when>
               <XSL:when test="regex-group(1)='conint'">‚àÆ</XSL:when>
               <XSL:when test="regex-group(1)='conjunction'">‚òå</XSL:when>
               <XSL:when test="regex-group(1)='copy'">¬©</XSL:when>
               <XSL:when test="regex-group(1)='copysr'">‚Ñó</XSL:when>
               <XSL:when test="regex-group(1)='cup'">‚à™</XSL:when>
               <XSL:when test="regex-group(1)='curren'">¬§</XSL:when>
               <XSL:when test="regex-group(1)='dagger'">‚Ä†</XSL:when>
               <XSL:when test="regex-group(1)='dalet'">◊ì</XSL:when>
               <XSL:when test="regex-group(1)='darga'">÷ß</XSL:when>
               <XSL:when test="regex-group(1)='darr'">‚Üì</XSL:when>
               <XSL:when test="regex-group(1)='dash'">‚Äê</XSL:when>
               <XSL:when test="regex-group(1)='dcaron'">ƒè</XSL:when>
               <XSL:when test="regex-group(1)='dcy'">–¥</XSL:when>
               <XSL:when test="regex-group(1)='ddiple'">‚∏ñ</XSL:when>
               <XSL:when test="regex-group(1)='ddotb'">·∏ç</XSL:when>
               <XSL:when test="regex-group(1)='deg'">¬∞</XSL:when>
               <XSL:when test="regex-group(1)='delta'">·∫ü</XSL:when>
               <XSL:when test="regex-group(1)='dgr'">Œ¥</XSL:when>
               <XSL:when test="regex-group(1)='diamond'">‚óÜ</XSL:when>
               <XSL:when test="regex-group(1)='diams'">‚ô¶</XSL:when>
               <XSL:when test="regex-group(1)='die1'">‚öÄ</XSL:when>
               <XSL:when test="regex-group(1)='die2'">‚öÅ</XSL:when>
               <XSL:when test="regex-group(1)='die3'">‚öÇ</XSL:when>
               <XSL:when test="regex-group(1)='die4'">‚öÉ</XSL:when>
               <XSL:when test="regex-group(1)='die5'">‚öÑ</XSL:when>
               <XSL:when test="regex-group(1)='die6'">‚öÖ</XSL:when>
               <XSL:when test="regex-group(1)='diggr'">œù</XSL:when>
               <XSL:when test="regex-group(1)='dindx'">‚òü</XSL:when>
               <XSL:when test="regex-group(1)='divide'">√∑</XSL:when>
               <XSL:when test="regex-group(1)='dlcrop'">‚åç</XSL:when>
               <XSL:when test="regex-group(1)='dollar'">$</XSL:when>
               <XSL:when test="regex-group(1)='drcrop'">‚åå</XSL:when>
               <XSL:when test="regex-group(1)='dstrok'">ƒë</XSL:when>
               <XSL:when test="regex-group(1)='dtri'">‚ñø</XSL:when>
               <XSL:when test="regex-group(1)='dtridot'">‚∏™</XSL:when>
               <XSL:when test="regex-group(1)='dtrif'">‚ñæ</XSL:when>
               <XSL:when test="regex-group(1)='eacugr'">·Ω≥</XSL:when>
               <XSL:when test="regex-group(1)='eacute'">√©</XSL:when>
               <XSL:when test="regex-group(1)='earth'">üúÉ</XSL:when>
               <XSL:when test="regex-group(1)='ebreve'">ƒï</XSL:when>
               <XSL:when test="regex-group(1)='ecaron'">ƒõ</XSL:when>
               <XSL:when test="regex-group(1)='ecirc'">√™</XSL:when>
               <XSL:when test="regex-group(1)='ecy'">—ç</XSL:when>
               <XSL:when test="regex-group(1)='edot'">ƒó</XSL:when>
               <XSL:when test="regex-group(1)='eeacugr'">·Ωµ</XSL:when>
               <XSL:when test="regex-group(1)='eeaigr'">·øÑ</XSL:when>
               <XSL:when test="regex-group(1)='eecigr'">·øá</XSL:when>
               <XSL:when test="regex-group(1)='eecirgr'">·øÜ</XSL:when>
               <XSL:when test="regex-group(1)='eegigr'">·øÇ</XSL:when>
               <XSL:when test="regex-group(1)='eegr'">Œ∑</XSL:when>
               <XSL:when test="regex-group(1)='eegragr'">·Ω¥</XSL:when>
               <XSL:when test="regex-group(1)='eeiotgr'">·øÉ</XSL:when>
               <XSL:when test="regex-group(1)='eeragr'">·º•</XSL:when>
               <XSL:when test="regex-group(1)='eeraigr'">·æï</XSL:when>
               <XSL:when test="regex-group(1)='eercgr'">·ºß</XSL:when>
               <XSL:when test="regex-group(1)='eercigr'">·æó</XSL:when>
               <XSL:when test="regex-group(1)='eerggr'">·º£</XSL:when>
               <XSL:when test="regex-group(1)='eergigr'">·æì</XSL:when>
               <XSL:when test="regex-group(1)='eerigr'">·æë</XSL:when>
               <XSL:when test="regex-group(1)='eerougr'">·º°</XSL:when>
               <XSL:when test="regex-group(1)='eesagr'">·º§</XSL:when>
               <XSL:when test="regex-group(1)='eesaigr'">·æî</XSL:when>
               <XSL:when test="regex-group(1)='eescgr'">·º¶</XSL:when>
               <XSL:when test="regex-group(1)='eescigr'">·æñ</XSL:when>
               <XSL:when test="regex-group(1)='eesggr'">·º¢</XSL:when>
               <XSL:when test="regex-group(1)='eesgigr'">·æí</XSL:when>
               <XSL:when test="regex-group(1)='eesigr'">·æê</XSL:when>
               <XSL:when test="regex-group(1)='eesmogr'">·º†</XSL:when>
               <XSL:when test="regex-group(1)='egr'">Œµ</XSL:when>
               <XSL:when test="regex-group(1)='egragr'">·Ω≤</XSL:when>
               <XSL:when test="regex-group(1)='egrave'">√®</XSL:when>
               <XSL:when test="regex-group(1)='emacr'">ƒì</XSL:when>
               <XSL:when test="regex-group(1)='emsp'">‚ÄÉ</XSL:when>
               <XSL:when test="regex-group(1)='emsp13'">‚ÄÑ</XSL:when>
               <XSL:when test="regex-group(1)='emsp14'">‚ÄÖ</XSL:when>
               <XSL:when test="regex-group(1)='eng'">≈ã</XSL:when>
               <XSL:when test="regex-group(1)='ensp'">‚ÄÇ</XSL:when>
               <XSL:when test="regex-group(1)='eogon'">ƒô</XSL:when>
               <XSL:when test="regex-group(1)='equals'">=</XSL:when>
               <XSL:when test="regex-group(1)='equiv'">‚â°</XSL:when>
               <XSL:when test="regex-group(1)='eragr'">·ºï</XSL:when>
               <XSL:when test="regex-group(1)='erggr'">·ºì</XSL:when>
               <XSL:when test="regex-group(1)='erougr'">·ºë</XSL:when>
               <XSL:when test="regex-group(1)='esagr'">·ºî</XSL:when>
               <XSL:when test="regex-group(1)='esggr'">·ºí</XSL:when>
               <XSL:when test="regex-group(1)='esmogr'">·ºê</XSL:when>
               <XSL:when test="regex-group(1)='eth'">√∞</XSL:when>
               <XSL:when test="regex-group(1)='etnahta'">÷ë</XSL:when>
               <XSL:when test="regex-group(1)='euml'">√´</XSL:when>
               <XSL:when test="regex-group(1)='excl'">!</XSL:when>
               <XSL:when test="regex-group(1)='exist'">‚àÉ</XSL:when>
               <XSL:when test="regex-group(1)='fclef'">ùÑ¢</XSL:when>
               <XSL:when test="regex-group(1)='fcy'">—Ñ</XSL:when>
               <XSL:when test="regex-group(1)='fermata'">ùÑê</XSL:when>
               <XSL:when test="regex-group(1)='fermatab'">ùÑë</XSL:when>
               <XSL:when test="regex-group(1)='ffilig'">Ô¨É</XSL:when>
               <XSL:when test="regex-group(1)='fflig'">Ô¨Ä</XSL:when>
               <XSL:when test="regex-group(1)='ffllig'">Ô¨Ñ</XSL:when>
               <XSL:when test="regex-group(1)='filig'">Ô¨Å</XSL:when>
               <XSL:when test="regex-group(1)='finalkaf'">◊ö</XSL:when>
               <XSL:when test="regex-group(1)='finalmem'">◊ù</XSL:when>
               <XSL:when test="regex-group(1)='finalnun'">◊ü</XSL:when>
               <XSL:when test="regex-group(1)='finalpe'">◊£</XSL:when>
               <XSL:when test="regex-group(1)='finaltsadi'">◊•</XSL:when>
               <XSL:when test="regex-group(1)='fire'">üúÇ</XSL:when>
               <XSL:when test="regex-group(1)='fivedot'">‚Åô</XSL:when>
               <XSL:when test="regex-group(1)='flat'">‚ô≠</XSL:when>
               <XSL:when test="regex-group(1)='fleurdelys'">‚öú</XSL:when>
               <XSL:when test="regex-group(1)='fllig'">Ô¨Ç</XSL:when>
               <XSL:when test="regex-group(1)='flower'">‚ùÄ</XSL:when>
               <XSL:when test="regex-group(1)='flowerf'">‚úø</XSL:when>
               <XSL:when test="regex-group(1)='fnof'">∆í</XSL:when>
               <XSL:when test="regex-group(1)='forall'">‚àÄ</XSL:when>
               <XSL:when test="regex-group(1)='frac12'">¬Ω</XSL:when>
               <XSL:when test="regex-group(1)='frac13'">‚Öì</XSL:when>
               <XSL:when test="regex-group(1)='frac14'">¬º</XSL:when>
               <XSL:when test="regex-group(1)='frac15'">‚Öï</XSL:when>
               <XSL:when test="regex-group(1)='frac16'">‚Öô</XSL:when>
               <XSL:when test="regex-group(1)='frac18'">‚Öõ</XSL:when>
               <XSL:when test="regex-group(1)='frac23'">‚Öî</XSL:when>
               <XSL:when test="regex-group(1)='frac25'">‚Öñ</XSL:when>
               <XSL:when test="regex-group(1)='frac34'">¬æ</XSL:when>
               <XSL:when test="regex-group(1)='frac35'">‚Öó</XSL:when>
               <XSL:when test="regex-group(1)='frac38'">‚Öú</XSL:when>
               <XSL:when test="regex-group(1)='frac45'">‚Öò</XSL:when>
               <XSL:when test="regex-group(1)='frac56'">‚Öö</XSL:when>
               <XSL:when test="regex-group(1)='frac58'">‚Öù</XSL:when>
               <XSL:when test="regex-group(1)='frac78'">‚Öû</XSL:when>
               <XSL:when test="regex-group(1)='gacute'">«µ</XSL:when>
               <XSL:when test="regex-group(1)='gbreve'">ƒü</XSL:when>
               <XSL:when test="regex-group(1)='gcirc'">ƒù</XSL:when>
               <XSL:when test="regex-group(1)='gclef'">ùÑû</XSL:when>
               <XSL:when test="regex-group(1)='gcy'">–≥</XSL:when>
               <XSL:when test="regex-group(1)='gdot'">ƒ°</XSL:when>
               <XSL:when test="regex-group(1)='ge'">‚â•</XSL:when>
               <XSL:when test="regex-group(1)='geoprop'">‚à∫</XSL:when>
               <XSL:when test="regex-group(1)='geresh'">÷ú</XSL:when>
               <XSL:when test="regex-group(1)='ggr'">Œ≥</XSL:when>
               <XSL:when test="regex-group(1)='ghacek'">«ß</XSL:when>
               <XSL:when test="regex-group(1)='gimel'">◊í</XSL:when>
               <XSL:when test="regex-group(1)='hairsp'">‚Ää</XSL:when>
               <XSL:when test="regex-group(1)='hamilt'">‚Ñã</XSL:when>
               <XSL:when test="regex-group(1)='hardcy'">—ä</XSL:when>
               <XSL:when test="regex-group(1)='hcirc'">ƒ•</XSL:when>
               <XSL:when test="regex-group(1)='hcolon'">◊É</XSL:when>
               <XSL:when test="regex-group(1)='he'">◊î</XSL:when>
               <XSL:when test="regex-group(1)='hearts'">‚ô•</XSL:when>
               <XSL:when test="regex-group(1)='hellip'">‚Ä¶</XSL:when>
               <XSL:when test="regex-group(1)='het'">◊ó</XSL:when>
               <XSL:when test="regex-group(1)='horbar'">‚Äï</XSL:when>
               <XSL:when test="regex-group(1)='hstrok'">ƒß</XSL:when>
               <XSL:when test="regex-group(1)='hybull'">‚ÅÉ</XSL:when>
               <XSL:when test="regex-group(1)='hyphen'">-</XSL:when>
               <XSL:when test="regex-group(1)='iacugr'">·Ω∑</XSL:when>
               <XSL:when test="regex-group(1)='iacute'">√≠</XSL:when>
               <XSL:when test="regex-group(1)='iadgr'">·øì</XSL:when>
               <XSL:when test="regex-group(1)='ibreve'">ƒ≠</XSL:when>
               <XSL:when test="regex-group(1)='icdgr'">·øó</XSL:when>
               <XSL:when test="regex-group(1)='icirc'">√Æ</XSL:when>
               <XSL:when test="regex-group(1)='icirgr'">·øñ</XSL:when>
               <XSL:when test="regex-group(1)='icy'">–∏</XSL:when>
               <XSL:when test="regex-group(1)='iecy'">–µ</XSL:when>
               <XSL:when test="regex-group(1)='iexcl'">¬°</XSL:when>
               <XSL:when test="regex-group(1)='iff'">‚áî</XSL:when>
               <XSL:when test="regex-group(1)='igdgr'">·øí</XSL:when>
               <XSL:when test="regex-group(1)='igr'">Œπ</XSL:when>
               <XSL:when test="regex-group(1)='igragr'">·Ω∂</XSL:when>
               <XSL:when test="regex-group(1)='igrave'">√¨</XSL:when>
               <XSL:when test="regex-group(1)='ijlig'">ƒ≥</XSL:when>
               <XSL:when test="regex-group(1)='imacr'">ƒ´</XSL:when>
               <XSL:when test="regex-group(1)='incare'">‚ÑÖ</XSL:when>
               <XSL:when test="regex-group(1)='infin'">‚àû</XSL:when>
               <XSL:when test="regex-group(1)='inodot'">ƒ±</XSL:when>
               <XSL:when test="regex-group(1)='insul-D'">Íùπ</XSL:when>
               <XSL:when test="regex-group(1)='insul-F'">Íùª</XSL:when>
               <XSL:when test="regex-group(1)='insul-G'">ÍùΩ</XSL:when>
               <XSL:when test="regex-group(1)='insul-R'">ÍûÇ</XSL:when>
               <XSL:when test="regex-group(1)='insul-S'">ÍûÑ</XSL:when>
               <XSL:when test="regex-group(1)='insul-T'">ÍûÜ</XSL:when>
               <XSL:when test="regex-group(1)='insul-d'">Íù∫</XSL:when>
               <XSL:when test="regex-group(1)='insul-f'">Íùº</XSL:when>
               <XSL:when test="regex-group(1)='insul-g'">·µπ</XSL:when>
               <XSL:when test="regex-group(1)='insul-r'">ÍûÉ</XSL:when>
               <XSL:when test="regex-group(1)='insul-s'">ÍûÖ</XSL:when>
               <XSL:when test="regex-group(1)='insul-t'">Íûá</XSL:when>
               <XSL:when test="regex-group(1)='int'">‚à´</XSL:when>
               <XSL:when test="regex-group(1)='iocy'">—ë</XSL:when>
               <XSL:when test="regex-group(1)='iogon'">ƒØ</XSL:when>
               <XSL:when test="regex-group(1)='iquest'">¬ø</XSL:when>
               <XSL:when test="regex-group(1)='iragr'">·ºµ</XSL:when>
               <XSL:when test="regex-group(1)='ircgr'">·º∑</XSL:when>
               <XSL:when test="regex-group(1)='irggr'">·º≥</XSL:when>
               <XSL:when test="regex-group(1)='irougr'">·º±</XSL:when>
               <XSL:when test="regex-group(1)='isagr'">·º¥</XSL:when>
               <XSL:when test="regex-group(1)='iscgr'">·º∂</XSL:when>
               <XSL:when test="regex-group(1)='isggr'">·º≤</XSL:when>
               <XSL:when test="regex-group(1)='isin'">‚àä</XSL:when>
               <XSL:when test="regex-group(1)='ismogr'">·º∞</XSL:when>
               <XSL:when test="regex-group(1)='itilde'">ƒ©</XSL:when>
               <XSL:when test="regex-group(1)='iuml'">√Ø</XSL:when>
               <XSL:when test="regex-group(1)='jcirc'">ƒµ</XSL:when>
               <XSL:when test="regex-group(1)='jcy'">–π</XSL:when>
               <XSL:when test="regex-group(1)='kaf'">◊õ</XSL:when>
               <XSL:when test="regex-group(1)='kcedil'">ƒ∑</XSL:when>
               <XSL:when test="regex-group(1)='kcy'">–∫</XSL:when>
               <XSL:when test="regex-group(1)='keraia'">Õ¥</XSL:when>
               <XSL:when test="regex-group(1)='kgr'">Œ∫</XSL:when>
               <XSL:when test="regex-group(1)='kgreen'">ƒ∏</XSL:when>
               <XSL:when test="regex-group(1)='khcy'">—Ö</XSL:when>
               <XSL:when test="regex-group(1)='khgr'">œá</XSL:when>
               <XSL:when test="regex-group(1)='kogr'">œü</XSL:when>
               <XSL:when test="regex-group(1)='lArr'">‚áê</XSL:when>
               <XSL:when test="regex-group(1)='lacute'">ƒ∫</XSL:when>
               <XSL:when test="regex-group(1)='lagran'">‚Ñí</XSL:when>
               <XSL:when test="regex-group(1)='lamed'">◊ú</XSL:when>
               <XSL:when test="regex-group(1)='lang'">„Äà</XSL:when>
               <XSL:when test="regex-group(1)='langle'">‚¶£</XSL:when>
               <XSL:when test="regex-group(1)='laquo'">¬´</XSL:when>
               <XSL:when test="regex-group(1)='larr'">‚Üê</XSL:when>
               <XSL:when test="regex-group(1)='latcross'">‚úù</XSL:when>
               <XSL:when test="regex-group(1)='lazyS'">‚àΩ</XSL:when>
               <XSL:when test="regex-group(1)='lbar'">…´</XSL:when>
               <XSL:when test="regex-group(1)='lbrace'">{</XSL:when>
               <XSL:when test="regex-group(1)='lcaron'">ƒæ</XSL:when>
               <XSL:when test="regex-group(1)='lcedil'">ƒº</XSL:when>
               <XSL:when test="regex-group(1)='lcy'">–ª</XSL:when>
               <XSL:when test="regex-group(1)='ldotb'">·∏∑</XSL:when>
               <XSL:when test="regex-group(1)='ldquo'">‚Äú</XSL:when>
               <XSL:when test="regex-group(1)='ldquor'">‚Äû</XSL:when>
               <XSL:when test="regex-group(1)='le'">‚â§</XSL:when>
               <XSL:when test="regex-group(1)='lgr'">Œª</XSL:when>
               <XSL:when test="regex-group(1)='lhblk'">‚ñÑ</XSL:when>
               <XSL:when test="regex-group(1)='lindx'">‚òú</XSL:when>
               <XSL:when test="regex-group(1)='lkeraia'">Õµ</XSL:when>
               <XSL:when test="regex-group(1)='ll'">·ªª</XSL:when>
               <XSL:when test="regex-group(1)='lmidot'">≈Ä</XSL:when>
               <XSL:when test="regex-group(1)='lowast'">‚àó</XSL:when>
               <XSL:when test="regex-group(1)='lowbar'">_</XSL:when>
               <XSL:when test="regex-group(1)='loz'">‚óä</XSL:when>
               <XSL:when test="regex-group(1)='lozf'">‚ú¶</XSL:when>
               <XSL:when test="regex-group(1)='lpar'">(</XSL:when>
               <XSL:when test="regex-group(1)='lpara'">‚Åã</XSL:when>
               <XSL:when test="regex-group(1)='lrepeat'">ùÑÜ</XSL:when>
               <XSL:when test="regex-group(1)='lsemicol'">‚Åè</XSL:when>
               <XSL:when test="regex-group(1)='lsqb'">[</XSL:when>
               <XSL:when test="regex-group(1)='lsquo'">‚Äò</XSL:when>
               <XSL:when test="regex-group(1)='lsquor'">‚Äö</XSL:when>
               <XSL:when test="regex-group(1)='lstrok'">≈Ç</XSL:when>
               <XSL:when test="regex-group(1)='ltri'">‚óÉ</XSL:when>
               <XSL:when test="regex-group(1)='ltrif'">‚óÇ</XSL:when>
               <XSL:when test="regex-group(1)='mahapakh'">÷§</XSL:when>
               <XSL:when test="regex-group(1)='malt'">‚ú†</XSL:when>
               <XSL:when test="regex-group(1)='marker'">‚ñÆ</XSL:when>
               <XSL:when test="regex-group(1)='mcy'">–º</XSL:when>
               <XSL:when test="regex-group(1)='mdash'">‚Äî</XSL:when>
               <XSL:when test="regex-group(1)='mem'">◊û</XSL:when>
               <XSL:when test="regex-group(1)='merkha'">÷•</XSL:when>
               <XSL:when test="regex-group(1)='mgr'">Œº</XSL:when>
               <XSL:when test="regex-group(1)='micro'">¬µ</XSL:when>
               <XSL:when test="regex-group(1)='middot'">¬∑</XSL:when>
               <XSL:when test="regex-group(1)='minus'">‚àí</XSL:when>
               <XSL:when test="regex-group(1)='mnplus'">‚àì</XSL:when>
               <XSL:when test="regex-group(1)='munah'">÷£</XSL:when>
               <XSL:when test="regex-group(1)='musicBrace'">ùÑî</XSL:when>
               <XSL:when test="regex-group(1)='musicBracket'">ùÑï</XSL:when>
               <XSL:when test="regex-group(1)='nabla'">‚àá</XSL:when>
               <XSL:when test="regex-group(1)='nacute'">≈Ñ</XSL:when>
               <XSL:when test="regex-group(1)='napos'">≈â</XSL:when>
               <XSL:when test="regex-group(1)='natur'">‚ôÆ</XSL:when>
               <XSL:when test="regex-group(1)='nbsp'">¬†</XSL:when>
               <XSL:when test="regex-group(1)='ncaron'">≈à</XSL:when>
               <XSL:when test="regex-group(1)='ncedil'">≈Ü</XSL:when>
               <XSL:when test="regex-group(1)='ncy'">–Ω</XSL:when>
               <XSL:when test="regex-group(1)='ndash'">‚Äì</XSL:when>
               <XSL:when test="regex-group(1)='ne'">‚â†</XSL:when>
               <XSL:when test="regex-group(1)='ngr'">ŒΩ</XSL:when>
               <XSL:when test="regex-group(1)='ni'">‚àç</XSL:when>
               <XSL:when test="regex-group(1)='night'">üùØ</XSL:when>
               <XSL:when test="regex-group(1)='nitre'">üúï</XSL:when>
               <XSL:when test="regex-group(1)='nldr'">‚Ä•</XSL:when>
               <XSL:when test="regex-group(1)='northnode'">‚òä</XSL:when>
               <XSL:when test="regex-group(1)='not'">¬¨</XSL:when>
               <XSL:when test="regex-group(1)='noteEighth'">ùÖ†</XSL:when>
               <XSL:when test="regex-group(1)='noteHalf'">ùÖû</XSL:when>
               <XSL:when test="regex-group(1)='noteQuarter'">ùÖü</XSL:when>
               <XSL:when test="regex-group(1)='noteWhole'">ùÖù</XSL:when>
               <XSL:when test="regex-group(1)='notebreve'">ùÜ∏</XSL:when>
               <XSL:when test="regex-group(1)='notecrotchet'">ùÜº</XSL:when>
               <XSL:when test="regex-group(1)='notelarge'">ùÜ∂</XSL:when>
               <XSL:when test="regex-group(1)='notelong'">ùÜ∑</XSL:when>
               <XSL:when test="regex-group(1)='noteminim'">ùÜª</XSL:when>
               <XSL:when test="regex-group(1)='notequaver'">ùÜæ</XSL:when>
               <XSL:when test="regex-group(1)='notesemibreve'">ùÜπ</XSL:when>
               <XSL:when test="regex-group(1)='notesemiquaver'">ùáÄ</XSL:when>
               <XSL:when test="regex-group(1)='notin'">‚àâ</XSL:when>
               <XSL:when test="regex-group(1)='ntilde'">√±</XSL:when>
               <XSL:when test="regex-group(1)='num'">#</XSL:when>
               <XSL:when test="regex-group(1)='numero'">‚Ññ</XSL:when>
               <XSL:when test="regex-group(1)='numsp'">‚Äá</XSL:when>
               <XSL:when test="regex-group(1)='nun'">◊†</XSL:when>
               <XSL:when test="regex-group(1)='oacugr'">·Ωπ</XSL:when>
               <XSL:when test="regex-group(1)='oacute'">√≥</XSL:when>
               <XSL:when test="regex-group(1)='obelus'">‚∏ì</XSL:when>
               <XSL:when test="regex-group(1)='obreve'">≈è</XSL:when>
               <XSL:when test="regex-group(1)='ocirc'">√¥</XSL:when>
               <XSL:when test="regex-group(1)='ocy'">–æ</XSL:when>
               <XSL:when test="regex-group(1)='odblac'">≈ë</XSL:when>
               <XSL:when test="regex-group(1)='oelig'">≈ì</XSL:when>
               <XSL:when test="regex-group(1)='ogr'">Œø</XSL:when>
               <XSL:when test="regex-group(1)='ogragr'">·Ω∏</XSL:when>
               <XSL:when test="regex-group(1)='ograve'">√≤</XSL:when>
               <XSL:when test="regex-group(1)='ohacek'">«í</XSL:when>
               <XSL:when test="regex-group(1)='ohacugr'">·ΩΩ</XSL:when>
               <XSL:when test="regex-group(1)='ohaigr'">·ø¥</XSL:when>
               <XSL:when test="regex-group(1)='ohcigr'">·ø∑</XSL:when>
               <XSL:when test="regex-group(1)='ohcirgr'">·ø∂</XSL:when>
               <XSL:when test="regex-group(1)='ohgigr'">·ø≤</XSL:when>
               <XSL:when test="regex-group(1)='ohgr'">œâ</XSL:when>
               <XSL:when test="regex-group(1)='ohgragr'">·Ωº</XSL:when>
               <XSL:when test="regex-group(1)='ohigr'">·ø≥</XSL:when>
               <XSL:when test="regex-group(1)='ohkact'">ÓÄÉ</XSL:when>
               <XSL:when test="regex-group(1)='ohm'">‚Ñ¶</XSL:when>
               <XSL:when test="regex-group(1)='ohragr'">·Ω•</XSL:when>
               <XSL:when test="regex-group(1)='ohraigr'">·æ•</XSL:when>
               <XSL:when test="regex-group(1)='ohrcgr'">·Ωß</XSL:when>
               <XSL:when test="regex-group(1)='ohrcigr'">·æß</XSL:when>
               <XSL:when test="regex-group(1)='ohrggr'">·Ω£</XSL:when>
               <XSL:when test="regex-group(1)='ohrgigr'">·æ£</XSL:when>
               <XSL:when test="regex-group(1)='ohrigr'">·æ°</XSL:when>
               <XSL:when test="regex-group(1)='ohrougr'">·Ω°</XSL:when>
               <XSL:when test="regex-group(1)='ohsagr'">·Ω§</XSL:when>
               <XSL:when test="regex-group(1)='ohsaigr'">·æ§</XSL:when>
               <XSL:when test="regex-group(1)='ohscgr'">·Ω¶</XSL:when>
               <XSL:when test="regex-group(1)='ohscigr'">·æ¶</XSL:when>
               <XSL:when test="regex-group(1)='ohsggr'">·Ω¢</XSL:when>
               <XSL:when test="regex-group(1)='ohsgigr'">·æ¢</XSL:when>
               <XSL:when test="regex-group(1)='ohsigr'">·æ†</XSL:when>
               <XSL:when test="regex-group(1)='ohsmogr'">·Ω†</XSL:when>
               <XSL:when test="regex-group(1)='oil'">üùÜ</XSL:when>
               <XSL:when test="regex-group(1)='omacr'">≈ç</XSL:when>
               <XSL:when test="regex-group(1)='opposition'">‚òç</XSL:when>
               <XSL:when test="regex-group(1)='or'">‚à®</XSL:when>
               <XSL:when test="regex-group(1)='oragr'">·ΩÖ</XSL:when>
               <XSL:when test="regex-group(1)='order'">‚Ñ¥</XSL:when>
               <XSL:when test="regex-group(1)='ordf'">¬™</XSL:when>
               <XSL:when test="regex-group(1)='ordm'">¬∫</XSL:when>
               <XSL:when test="regex-group(1)='orggr'">·ΩÉ</XSL:when>
               <XSL:when test="regex-group(1)='orougr'">·ΩÅ</XSL:when>
               <XSL:when test="regex-group(1)='orpiment'">üúΩ</XSL:when>
               <XSL:when test="regex-group(1)='osagr'">·ΩÑ</XSL:when>
               <XSL:when test="regex-group(1)='osggr'">·ΩÇ</XSL:when>
               <XSL:when test="regex-group(1)='oslash'">√∏</XSL:when>
               <XSL:when test="regex-group(1)='osmogr'">·ΩÄ</XSL:when>
               <XSL:when test="regex-group(1)='otilde'">√µ</XSL:when>
               <XSL:when test="regex-group(1)='ouml'">√∂</XSL:when>
               <XSL:when test="regex-group(1)='ounce'">‚Ñ•</XSL:when>
               <XSL:when test="regex-group(1)='par'">‚à•</XSL:when>
               <XSL:when test="regex-group(1)='para'">¬∂</XSL:when>
               <XSL:when test="regex-group(1)='part'">‚àÇ</XSL:when>
               <XSL:when test="regex-group(1)='pashta'">÷ô</XSL:when>
               <XSL:when test="regex-group(1)='pcy'">–ø</XSL:when>
               <XSL:when test="regex-group(1)='pe'">◊§</XSL:when>
               <XSL:when test="regex-group(1)='percnt'">%</XSL:when>
               <XSL:when test="regex-group(1)='period'">.</XSL:when>
               <XSL:when test="regex-group(1)='permil'">‚Ä∞</XSL:when>
               <XSL:when test="regex-group(1)='perp'">‚ä•</XSL:when>
               <XSL:when test="regex-group(1)='pgr'">œÄ</XSL:when>
               <XSL:when test="regex-group(1)='pgrave'">ÓÄÅ</XSL:when>
               <XSL:when test="regex-group(1)='phgr'">œÜ</XSL:when>
               <XSL:when test="regex-group(1)='phmmat'">‚Ñ≥</XSL:when>
               <XSL:when test="regex-group(1)='plus'">+</XSL:when>
               <XSL:when test="regex-group(1)='plusmn'">¬±</XSL:when>
               <XSL:when test="regex-group(1)='potash'">üùò</XSL:when>
               <XSL:when test="regex-group(1)='pound'">¬£</XSL:when>
               <XSL:when test="regex-group(1)='prime'">‚Ä≤</XSL:when>
               <XSL:when test="regex-group(1)='prop'">‚àù</XSL:when>
               <XSL:when test="regex-group(1)='proportion'">‚à∑</XSL:when>
               <XSL:when test="regex-group(1)='psgr'">œà</XSL:when>
               <XSL:when test="regex-group(1)='puncsp'">‚Äà</XSL:when>
               <XSL:when test="regex-group(1)='purify'">üù£</XSL:when>
               <XSL:when test="regex-group(1)='qacute'">ÓÄÇ</XSL:when>
               <XSL:when test="regex-group(1)='qbar'">Íùó</XSL:when>
               <XSL:when test="regex-group(1)='qmgr'">Õæ</XSL:when>
               <XSL:when test="regex-group(1)='qof'">◊ß</XSL:when>
               <XSL:when test="regex-group(1)='quaddot'">‚∏¨</XSL:when>
               <XSL:when test="regex-group(1)='quest'">?</XSL:when>
               <XSL:when test="regex-group(1)='quicklime'">üùÅ</XSL:when>
               <XSL:when test="regex-group(1)='r'">Íùõ</XSL:when>
               <XSL:when test="regex-group(1)='rArr'">‚áí</XSL:when>
               <XSL:when test="regex-group(1)='racute'">≈ï</XSL:when>
               <XSL:when test="regex-group(1)='radic'">‚àö</XSL:when>
               <XSL:when test="regex-group(1)='rang'">„Äâ</XSL:when>
               <XSL:when test="regex-group(1)='raquo'">¬ª</XSL:when>
               <XSL:when test="regex-group(1)='rarr'">‚Üí</XSL:when>
               <XSL:when test="regex-group(1)='ratio'">‚à∂</XSL:when>
               <XSL:when test="regex-group(1)='rayedSun'">‚òº</XSL:when>
               <XSL:when test="regex-group(1)='rbrace'">}</XSL:when>
               <XSL:when test="regex-group(1)='rcaron'">≈ô</XSL:when>
               <XSL:when test="regex-group(1)='rcedil'">≈ó</XSL:when>
               <XSL:when test="regex-group(1)='rcy'">—Ä</XSL:when>
               <XSL:when test="regex-group(1)='rdquo'">‚Äù</XSL:when>
               <XSL:when test="regex-group(1)='rect'">‚ñ≠</XSL:when>
               <XSL:when test="regex-group(1)='reg'">¬Æ</XSL:when>
               <XSL:when test="regex-group(1)='resh'">◊®</XSL:when>
               <XSL:when test="regex-group(1)='resp'">‚Ñü</XSL:when>
               <XSL:when test="regex-group(1)='restbreve'">ùáÉ</XSL:when>
               <XSL:when test="regex-group(1)='restcrotchet'">ùáÜ</XSL:when>
               <XSL:when test="regex-group(1)='restlarge'">ùáÅ</XSL:when>
               <XSL:when test="regex-group(1)='restlong'">ùáÇ</XSL:when>
               <XSL:when test="regex-group(1)='restminim'">ùáÖ</XSL:when>
               <XSL:when test="regex-group(1)='restsemibreve'">ùáÑ</XSL:when>
               <XSL:when test="regex-group(1)='retort'">üù≠</XSL:when>
               <XSL:when test="regex-group(1)='revC'">‚ÜÉ</XSL:when>
               <XSL:when test="regex-group(1)='revc'">‚ÜÑ</XSL:when>
               <XSL:when test="regex-group(1)='revia'">÷ó</XSL:when>
               <XSL:when test="regex-group(1)='rgr'">œÅ</XSL:when>
               <XSL:when test="regex-group(1)='rindx'">‚òû</XSL:when>
               <XSL:when test="regex-group(1)='rn10000'">‚ÜÇ</XSL:when>
               <XSL:when test="regex-group(1)='rn100000'">‚Üà</XSL:when>
               <XSL:when test="regex-group(1)='rn5000'">‚ÜÅ</XSL:when>
               <XSL:when test="regex-group(1)='rn50000'">‚Üá</XSL:when>
               <XSL:when test="regex-group(1)='rpar'">)</XSL:when>
               <XSL:when test="regex-group(1)='rrepeat'">ùÑá</XSL:when>
               <XSL:when test="regex-group(1)='rrougr'">·ø•</XSL:when>
               <XSL:when test="regex-group(1)='rsqb'">]</XSL:when>
               <XSL:when test="regex-group(1)='rsquo'">‚Äô</XSL:when>
               <XSL:when test="regex-group(1)='rtri'">‚ñπ</XSL:when>
               <XSL:when test="regex-group(1)='rtrif'">‚ñ∏</XSL:when>
               <XSL:when test="regex-group(1)='rx'">‚Ñû</XSL:when>
               <XSL:when test="regex-group(1)='s'">≈ø</XSL:when>
               <XSL:when test="regex-group(1)='sacute'">≈õ</XSL:when>
               <XSL:when test="regex-group(1)='salarmon'">üúπ</XSL:when>
               <XSL:when test="regex-group(1)='salt'">üúî</XSL:when>
               <XSL:when test="regex-group(1)='saltgemme'">üúò</XSL:when>
               <XSL:when test="regex-group(1)='saltire'">‚òì</XSL:when>
               <XSL:when test="regex-group(1)='samekh'">◊°</XSL:when>
               <XSL:when test="regex-group(1)='samgr'">œ°</XSL:when>
               <XSL:when test="regex-group(1)='scaron'">≈°</XSL:when>
               <XSL:when test="regex-group(1)='scedil'">≈ü</XSL:when>
               <XSL:when test="regex-group(1)='schwa'">…ô</XSL:when>
               <XSL:when test="regex-group(1)='scirc'">≈ù</XSL:when>
               <XSL:when test="regex-group(1)='scruple'">‚Ñà</XSL:when>
               <XSL:when test="regex-group(1)='scy'">—Å</XSL:when>
               <XSL:when test="regex-group(1)='sect'">¬ß</XSL:when>
               <XSL:when test="regex-group(1)='semi'">;</XSL:when>
               <XSL:when test="regex-group(1)='semisextile'">‚ö∫</XSL:when>
               <XSL:when test="regex-group(1)='sext'">‚ú∂</XSL:when>
               <XSL:when test="regex-group(1)='sextile'">‚öπ</XSL:when>
               <XSL:when test="regex-group(1)='sfgr'">œÇ</XSL:when>
               <XSL:when test="regex-group(1)='sgr'">œÉ</XSL:when>
               <XSL:when test="regex-group(1)='sharp'">‚ôØ</XSL:when>
               <XSL:when test="regex-group(1)='shchcy'">—â</XSL:when>
               <XSL:when test="regex-group(1)='shcy'">—à</XSL:when>
               <XSL:when test="regex-group(1)='shin'">◊©</XSL:when>
               <XSL:when test="regex-group(1)='shy'">¬≠</XSL:when>
               <XSL:when test="regex-group(1)='sim'">‚àº</XSL:when>
               <XSL:when test="regex-group(1)='sime'">‚âÉ</XSL:when>
               <XSL:when test="regex-group(1)='skull'">üíÄ</XSL:when>
               <XSL:when test="regex-group(1)='slungr'">œ≤</XSL:when>
               <XSL:when test="regex-group(1)='slur'">ùÖ∑ùÖ∑·¥ó</XSL:when>
               <XSL:when test="regex-group(1)='softcy'">—å</XSL:when>
               <XSL:when test="regex-group(1)='sol'">/</XSL:when>
               <XSL:when test="regex-group(1)='southnode'">‚òã</XSL:when>
               <XSL:when test="regex-group(1)='spades'">‚ô†</XSL:when>
               <XSL:when test="regex-group(1)='spcDash'">‚ïå</XSL:when>
               <XSL:when test="regex-group(1)='spcacute'">¬¥</XSL:when>
               <XSL:when test="regex-group(1)='spcbreve'">Àò</XSL:when>
               <XSL:when test="regex-group(1)='spccaron'">Àá</XSL:when>
               <XSL:when test="regex-group(1)='spccedil'">¬∏</XSL:when>
               <XSL:when test="regex-group(1)='spccirc'">^</XSL:when>
               <XSL:when test="regex-group(1)='spccommaa'">·æø</XSL:when>
               <XSL:when test="regex-group(1)='spcdblac'">Àù</XSL:when>
               <XSL:when test="regex-group(1)='spcdot'">Àô</XSL:when>
               <XSL:when test="regex-group(1)='spcgrave'">`</XSL:when>
               <XSL:when test="regex-group(1)='spcibreve'">ÓÇñ</XSL:when>
               <XSL:when test="regex-group(1)='spclowvertline'">Àå</XSL:when>
               <XSL:when test="regex-group(1)='spcmacr'">¬Ø</XSL:when>
               <XSL:when test="regex-group(1)='spcogon'">Àõ</XSL:when>
               <XSL:when test="regex-group(1)='spcperispo'">·øÄ</XSL:when>
               <XSL:when test="regex-group(1)='spcrcomma'">·øæ</XSL:when>
               <XSL:when test="regex-group(1)='spcring'">Àö</XSL:when>
               <XSL:when test="regex-group(1)='spctilde'">Àú</XSL:when>
               <XSL:when test="regex-group(1)='spcuml'">¬®</XSL:when>
               <XSL:when test="regex-group(1)='spcx'">ÓÇ≤</XSL:when>
               <XSL:when test="regex-group(1)='square'">‚ñ°</XSL:when>
               <XSL:when test="regex-group(1)='squf'">‚ñ†</XSL:when>
               <XSL:when test="regex-group(1)='star'">‚ãÜ</XSL:when>
               <XSL:when test="regex-group(1)='starf'">‚òÖ</XSL:when>
               <XSL:when test="regex-group(1)='starw'">‚òÜ</XSL:when>
               <XSL:when test="regex-group(1)='stgr'">œõ</XSL:when>
               <XSL:when test="regex-group(1)='sub'">‚äÇ</XSL:when>
               <XSL:when test="regex-group(1)='sube'">‚äÜ</XSL:when>
               <XSL:when test="regex-group(1)='subplus'">‚Çä</XSL:when>
               <XSL:when test="regex-group(1)='sulphur'">üúç</XSL:when>
               <XSL:when test="regex-group(1)='sung'">‚ô©</XSL:when>
               <XSL:when test="regex-group(1)='sup'">‚äÉ</XSL:when>
               <XSL:when test="regex-group(1)='sup1'">¬π</XSL:when>
               <XSL:when test="regex-group(1)='sup2'">¬≤</XSL:when>
               <XSL:when test="regex-group(1)='sup3'">¬≥</XSL:when>
               <XSL:when test="regex-group(1)='supe'">‚äá</XSL:when>
               <XSL:when test="regex-group(1)='syri-qaph'">‹©</XSL:when>
               <XSL:when test="regex-group(1)='szlig'">√ü</XSL:when>
               <XSL:when test="regex-group(1)='target'">‚åñ</XSL:when>
               <XSL:when test="regex-group(1)='tartar'">üúø</XSL:when>
               <XSL:when test="regex-group(1)='tav'">◊™</XSL:when>
               <XSL:when test="regex-group(1)='tcaron'">≈•</XSL:when>
               <XSL:when test="regex-group(1)='tcedil'">≈£</XSL:when>
               <XSL:when test="regex-group(1)='tcy'">—Ç</XSL:when>
               <XSL:when test="regex-group(1)='tdot'">‚Éõ</XSL:when>
               <XSL:when test="regex-group(1)='telrec'">‚åï</XSL:when>
               <XSL:when test="regex-group(1)='tet'">◊ò</XSL:when>
               <XSL:when test="regex-group(1)='tgr'">œÑ</XSL:when>
               <XSL:when test="regex-group(1)='that'">Íùß</XSL:when>
               <XSL:when test="regex-group(1)='there4'">‚à¥</XSL:when>
               <XSL:when test="regex-group(1)='thgr'">Œ∏</XSL:when>
               <XSL:when test="regex-group(1)='thinsp'">‚Äâ</XSL:when>
               <XSL:when test="regex-group(1)='thorn'">√æ</XSL:when>
               <XSL:when test="regex-group(1)='thscrgr'">œë</XSL:when>
               <XSL:when test="regex-group(1)='timeimperf-prolatimperf'">ùáã</XSL:when>
               <XSL:when test="regex-group(1)='timeimperf-prolatimperf-rev'">ùáå</XSL:when>
               <XSL:when test="regex-group(1)='timeimperf-prolatimperf-rev-str'">ùáé</XSL:when>
               <XSL:when test="regex-group(1)='timeimperf-prolatimperf-str'">ùáç</XSL:when>
               <XSL:when test="regex-group(1)='timeimperf-prolatperf'">ùáä</XSL:when>
               <XSL:when test="regex-group(1)='timeperf-prolatimperf'">ùáà</XSL:when>
               <XSL:when test="regex-group(1)='timeperf-prolatperf'">ùáá</XSL:when>
               <XSL:when test="regex-group(1)='times'">√ó</XSL:when>
               <XSL:when test="regex-group(1)='tipeha'">÷ñ</XSL:when>
               <XSL:when test="regex-group(1)='tprime'">‚Ä¥</XSL:when>
               <XSL:when test="regex-group(1)='trade'">‚Ñ¢</XSL:when>
               <XSL:when test="regex-group(1)='tridot'">‚∏´</XSL:when>
               <XSL:when test="regex-group(1)='tristar'">‚ÅÇ</XSL:when>
               <XSL:when test="regex-group(1)='triwdot'">‚ó¨</XSL:when>
               <XSL:when test="regex-group(1)='tsadi'">◊¶</XSL:when>
               <XSL:when test="regex-group(1)='tscy'">—Ü</XSL:when>
               <XSL:when test="regex-group(1)='tstrok'">≈ß</XSL:when>
               <XSL:when test="regex-group(1)='uacugr'">·Ωª</XSL:when>
               <XSL:when test="regex-group(1)='uacute'">√∫</XSL:when>
               <XSL:when test="regex-group(1)='uadgr'">·ø£</XSL:when>
               <XSL:when test="regex-group(1)='uarr'">‚Üë</XSL:when>
               <XSL:when test="regex-group(1)='ubreve'">≈≠</XSL:when>
               <XSL:when test="regex-group(1)='ucdgr'">·øß</XSL:when>
               <XSL:when test="regex-group(1)='ucirc'">√ª</XSL:when>
               <XSL:when test="regex-group(1)='ucirgr'">·ø¶</XSL:when>
               <XSL:when test="regex-group(1)='ucy'">—É</XSL:when>
               <XSL:when test="regex-group(1)='udblac'">≈±</XSL:when>
               <XSL:when test="regex-group(1)='udotb'">·ª•</XSL:when>
               <XSL:when test="regex-group(1)='ugdgr'">·ø¢</XSL:when>
               <XSL:when test="regex-group(1)='ugr'">œÖ</XSL:when>
               <XSL:when test="regex-group(1)='ugragr'">·Ω∫</XSL:when>
               <XSL:when test="regex-group(1)='ugrave'">√π</XSL:when>
               <XSL:when test="regex-group(1)='uhacek'">«î</XSL:when>
               <XSL:when test="regex-group(1)='uhblk'">‚ñÄ</XSL:when>
               <XSL:when test="regex-group(1)='uindx'">‚òù</XSL:when>
               <XSL:when test="regex-group(1)='ulcrop'">‚åè</XSL:when>
               <XSL:when test="regex-group(1)='umacr'">≈´</XSL:when>
               <XSL:when test="regex-group(1)='uogon'">≈≥</XSL:when>
               <XSL:when test="regex-group(1)='uragr'">·Ωï</XSL:when>
               <XSL:when test="regex-group(1)='urcgr'">·Ωó</XSL:when>
               <XSL:when test="regex-group(1)='urcrop'">‚åé</XSL:when>
               <XSL:when test="regex-group(1)='urggr'">·Ωì</XSL:when>
               <XSL:when test="regex-group(1)='urine'">üùï</XSL:when>
               <XSL:when test="regex-group(1)='uring'">≈Ø</XSL:when>
               <XSL:when test="regex-group(1)='urougr'">·Ωë</XSL:when>
               <XSL:when test="regex-group(1)='usagr'">·Ωî</XSL:when>
               <XSL:when test="regex-group(1)='uscgr'">·Ωñ</XSL:when>
               <XSL:when test="regex-group(1)='usggr'">·Ωí</XSL:when>
               <XSL:when test="regex-group(1)='usmogr'">·Ωê</XSL:when>
               <XSL:when test="regex-group(1)='utilde'">≈©</XSL:when>
               <XSL:when test="regex-group(1)='utri'">‚ñµ</XSL:when>
               <XSL:when test="regex-group(1)='utrif'">‚ñ¥</XSL:when>
               <XSL:when test="regex-group(1)='uuml'">√º</XSL:when>
               <XSL:when test="regex-group(1)='vav'">◊ï</XSL:when>
               <XSL:when test="regex-group(1)='vbreve'">ÓÇÄ</XSL:when>
               <XSL:when test="regex-group(1)='vcy'">–≤</XSL:when>
               <XSL:when test="regex-group(1)='vellip'">‚ãÆ</XSL:when>
               <XSL:when test="regex-group(1)='verbar'">|</XSL:when>
               <XSL:when test="regex-group(1)='vers'">‚Ñ£</XSL:when>
               <XSL:when test="regex-group(1)='vinedist'">üúã</XSL:when>
               <XSL:when test="regex-group(1)='vinegar'">üúä</XSL:when>
               <XSL:when test="regex-group(1)='vitriol'">üúñ</XSL:when>
               <XSL:when test="regex-group(1)='w'">·ªΩ</XSL:when>
               <XSL:when test="regex-group(1)='water'">üúÑ</XSL:when>
               <XSL:when test="regex-group(1)='wax'">üùä</XSL:when>
               <XSL:when test="regex-group(1)='wcirc'">≈µ</XSL:when>
               <XSL:when test="regex-group(1)='wedgeq'">‚âô</XSL:when>
               <XSL:when test="regex-group(1)='whbull'">‚ó¶</XSL:when>
               <XSL:when test="regex-group(1)='wyn'">∆ø</XSL:when>
               <XSL:when test="regex-group(1)='xgr'">Œæ</XSL:when>
               <XSL:when test="regex-group(1)='y'">·ªø</XSL:when>
               <XSL:when test="regex-group(1)='yacute'">√Ω</XSL:when>
               <XSL:when test="regex-group(1)='yacy'">—è</XSL:when>
               <XSL:when test="regex-group(1)='ycirc'">≈∑</XSL:when>
               <XSL:when test="regex-group(1)='ycy'">—ã</XSL:when>
               <XSL:when test="regex-group(1)='ydot'">·∫è</XSL:when>
               <XSL:when test="regex-group(1)='yen'">¬•</XSL:when>
               <XSL:when test="regex-group(1)='yhook'">∆¥</XSL:when>
               <XSL:when test="regex-group(1)='ymacr'">»≥</XSL:when>
               <XSL:when test="regex-group(1)='yod'">◊ô</XSL:when>
               <XSL:when test="regex-group(1)='yogh'">»ù</XSL:when>
               <XSL:when test="regex-group(1)='yucy'">—é</XSL:when>
               <XSL:when test="regex-group(1)='yuml'">√ø</XSL:when>
               <XSL:when test="regex-group(1)='z'">Íù™</XSL:when>
               <XSL:when test="regex-group(1)='zacute'">≈∫</XSL:when>
               <XSL:when test="regex-group(1)='zaqef-qatan'">÷î</XSL:when>
               <XSL:when test="regex-group(1)='zayin'">◊ñ</XSL:when>
               <XSL:when test="regex-group(1)='zcaron'">≈æ</XSL:when>
               <XSL:when test="regex-group(1)='zcy'">–∑</XSL:when>
               <XSL:when test="regex-group(1)='zdot'">≈º</XSL:when>
               <XSL:when test="regex-group(1)='zgr'">Œ∂</XSL:when>
               <XSL:when test="regex-group(1)='zhcy'">–∂</XSL:when>
               <XSL:when test="regex-group(1)='Ggr-rev'">
                  <XSL:variable name="replace">Œì</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('Ggr-rev',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('Ggr-rev',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='Moon'">
                  <XSL:variable name="replace">‚òΩ</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('Moon',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('Moon',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='Moonnew'">
                  <XSL:variable name="replace">‚óè</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('Moonnew',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('Moonnew',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='Moonround'">
                  <XSL:variable name="replace">‚ùç</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('Moonround',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('Moonround',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='Rgr-rev'">
                  <XSL:variable name="replace">Œ°</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('Rgr-rev',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('Rgr-rev',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='Sgr-rev'">
                  <XSL:variable name="replace">Œ£</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('Sgr-rev',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('Sgr-rev',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='V'">
                  <XSL:variable name="replace">∆≤</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('V',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('V',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='abPRI'">
                  <XSL:variable name="replace">{PRI}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('abPRI',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('abPRI',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='abQUE'">
                  <XSL:variable name="replace">{QUE}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('abQUE',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('abQUE',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='abUS'">
                  <XSL:variable name="replace">{US}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('abUS',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('abUS',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='abbrapo'">
                  <XSL:variable name="replace">‚Äô</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('abbrapo',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('abbrapo',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='abbus'">
                  <XSL:variable name="replace">{bus}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('abbus',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('abbus',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='aber'">
                  <XSL:variable name="replace">{er}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('aber',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('aber',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='abpre'">
                  <XSL:variable name="replace">pÃÑ</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('abpre',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('abpre',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='abpri'">
                  <XSL:variable name="replace">{pri}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('abpri',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('abpri',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='abqu'">
                  <XSL:variable name="replace">{qu}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('abqu',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('abqu',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='abquam'">
                  <XSL:variable name="replace">{quam}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('abquam',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('abquam',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='abque'">
                  <XSL:variable name="replace">{que}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('abque',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('abque',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='abqui'">
                  <XSL:variable name="replace">{qui}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('abqui',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('abqui',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='abris'">
                  <XSL:variable name="replace">{ris}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('abris',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('abris',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='abrum'">
                  <XSL:variable name="replace">{rum}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('abrum',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('abrum',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='absed'">
                  <XSL:variable name="replace">{sed}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('absed',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('absed',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='abser'">
                  <XSL:variable name="replace">{ser}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('abser',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('abser',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='abur'">
                  <XSL:variable name="replace">{ur}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('abur',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('abur',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='alum'">
                  <XSL:variable name="replace">{alum}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('alum',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('alum',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='alum2'">
                  <XSL:variable name="replace">{alum}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('alum2',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('alum2',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='angulum'">
                  <XSL:variable name="replace">{angulum}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('angulum',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('angulum',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='antimony'">
                  <XSL:variable name="replace">{antimony}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('antimony',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('antimony',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='arsenic2'">
                  <XSL:variable name="replace">{arsenic}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('arsenic2',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('arsenic2',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='asterisc'">
                  <XSL:variable name="replace">‹ç</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('asterisc',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('asterisc',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='barlinef'">
                  <XSL:variable name="replace">ùÑÄ</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('barlinef',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('barlinef',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='bezoarMin'">
                  <XSL:variable name="replace">‚ôå</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('bezoarMin',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('bezoarMin',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='blood'">
                  <XSL:variable name="replace">{blood}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('blood',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('blood',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='cinnabar2'">
                  <XSL:variable name="replace">{cinnabar}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('cinnabar2',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('cinnabar2',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='circdot'">
                  <XSL:variable name="replace">‚äô</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('circdot',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('circdot',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='cmbAbbrStroke'">
                  <XSL:variable name="replace">ÃÑ</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('cmbAbbrStroke',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('cmbAbbrStroke',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='commonTime-allegro'">
                  <XSL:variable name="replace">{common time (allegro)}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('commonTime-allegro',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('commonTime-allegro',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='commonTime-largo'">
                  <XSL:variable name="replace">{common time (largro)}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('commonTime-largo',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('commonTime-largo',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='cross'">
                  <XSL:variable name="replace">‚úö</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('cross',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('cross',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='day'">
                  <XSL:variable name="replace">{day}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('day',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('day',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='decimalL'">
                  <XSL:variable name="replace">‚åä</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('decimalL',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('decimalL',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='decimalc'">
                  <XSL:variable name="replace">.</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('decimalc',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('decimalc',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='dhook'">
                  <XSL:variable name="replace">dÃî</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('dhook',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('dhook',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='direct'">
                  <XSL:variable name="replace">{direct}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('direct',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('direct',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='divisor'">
                  <XSL:variable name="replace">{divisor}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('divisor',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('divisor',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='dnc-female'">
                  <XSL:variable name="replace">‚òΩ</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('dnc-female',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('dnc-female',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='dnc-male'">
                  <XSL:variable name="replace">‚òâ</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('dnc-male',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('dnc-male',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='dnc-repeat'">
                  <XSL:variable name="replace"> .Ã≤Ã≤ </XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('dnc-repeat',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('dnc-repeat',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='dnc-repeat2'">
                  <XSL:variable name="replace"> :Ã≤Ã≤ </XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('dnc-repeat2',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('dnc-repeat2',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='dnc-repeat3'">
                  <XSL:variable name="replace"> .Ã≤:Ã≤Ã≤ </XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('dnc-repeat3',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('dnc-repeat3',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='dnc-startover'">
                  <XSL:variable name="replace">‚Åú</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('dnc-startover',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('dnc-startover',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='dram'">
                  <XSL:variable name="replace"> í</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('dram',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('dram',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='dtristar'">
                  <XSL:variable name="replace">*‚Åé*</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('dtristar',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('dtristar',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='endq'">
                  <XSL:variable name="replace">‚Äù</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('endq',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('endq',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='es'">
                  <XSL:variable name="replace">{es}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('es',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('es',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='etc'">
                  <XSL:variable name="replace">{etc}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('etc',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('etc',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='female'">
                  <XSL:variable name="replace">‚ôÄ</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('female',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('female',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='finallamed'">
                  <XSL:variable name="replace">Ô¨•</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('finallamed',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('finallamed',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='fivedash'">
                  <XSL:variable name="replace">{fivedash}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('fivedash',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('fivedash',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='fjlig'">
                  <XSL:variable name="replace">{fj}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('fjlig',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('fjlig',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='glass'">
                  <XSL:variable name="replace">{glass}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('glass',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('glass',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='hDagger'">
                  <XSL:variable name="replace">{horizontal ‚Ä°}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('hDagger',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('hDagger',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='halfcross'">
                  <XSL:variable name="replace">‚ä¢</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('halfcross',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('halfcross',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='heart'">
                  <XSL:variable name="replace">‚ô°</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('heart',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('heart',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='higherterm'">
                  <XSL:variable name="replace">{higher term}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('higherterm',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('higherterm',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='higherthan'">
                  <XSL:variable name="replace">‚àß</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('higherthan',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('higherthan',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='hyperlemnisc'">
                  <XSL:variable name="replace">‚à∏</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('hyperlemnisc',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('hyperlemnisc',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='hypolemnisc'">
                  <XSL:variable name="replace">‹ã</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('hypolemnisc',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('hypolemnisc',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='idagger'">
                  <XSL:variable name="replace">{inverted ‚Ä†}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('idagger',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('idagger',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='ipara'">
                  <XSL:variable name="replace">‚Åã</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('ipara',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('ipara',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='ldagger'">
                  <XSL:variable name="replace">{left ‚Ä†}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('ldagger',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('ldagger',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='ldiple'">
                  <XSL:variable name="replace">‚Äπ</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('ldiple',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('ldiple',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='leaf'">
                  <XSL:variable name="replace">‚ùß</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('leaf',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('leaf',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='leftblank'">
                  <XSL:variable name="replace">{left blank}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('leftblank',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('leftblank',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='lemnisc'">
                  <XSL:variable name="replace">√∑</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('lemnisc',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('lemnisc',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='lessthan'">
                  <XSL:variable name="replace">‚Äπ</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('lessthan',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('lessthan',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='lloop'">
                  <XSL:variable name="replace">l æ</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('lloop',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('lloop',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='logarithm'">
                  <XSL:variable name="replace">{logarithm}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('logarithm',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('logarithm',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='lowerterm'">
                  <XSL:variable name="replace">‚äΩ</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('lowerterm',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('lowerterm',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='lowerthan'">
                  <XSL:variable name="replace">‚à®</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('lowerthan',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('lowerthan',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='lpunctel'">
                  <XSL:variable name="replace">ÿõ</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('lpunctel',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('lpunctel',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='lquest'">
                  <XSL:variable name="replace">{reversed ?}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('lquest',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('lquest',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='magnesia'">
                  <XSL:variable name="replace">‚óã‚Üí</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('magnesia',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('magnesia',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='male'">
                  <XSL:variable name="replace">‚ôÇ</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('male',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('male',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='minim'">
                  <XSL:variable name="replace">‚ôè</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('minim',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('minim',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='minim2'">
                  <XSL:variable name="replace">‚ôç</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('minim2',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('minim2',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='morethan'">
                  <XSL:variable name="replace">‚Ä∫</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('morethan',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('morethan',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='multiplier'">
                  <XSL:variable name="replace">{multiplier}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('multiplier',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('multiplier',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='musicNote'">
                  <XSL:variable name="replace">‚ô©</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('musicNote',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('musicNote',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='notedemisemiquaver'">
                  <XSL:variable name="replace">{demisemiquaver note}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('notedemisemiquaver',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('notedemisemiquaver',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='oil2'">
                  <XSL:variable name="replace">‚¶æ</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('oil2',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('oil2',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='ougr'">
                  <XSL:variable name="replace">»£</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('ougr',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('ougr',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='pashtayin'">
                  <XSL:variable name="replace">÷ô¬†÷®</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('pashtayin',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('pashtayin',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='potestas'">
                  <XSL:variable name="replace">{potestas}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('potestas',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('potestas',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='powerof1'">
                  <XSL:variable name="replace">{powerof1}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('powerof1',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('powerof1',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='powerof2'">
                  <XSL:variable name="replace">{powerof2}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('powerof2',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('powerof2',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='powerof3'">
                  <XSL:variable name="replace">{powerof3}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('powerof3',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('powerof3',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='powerof4'">
                  <XSL:variable name="replace">{powerof4}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('powerof4',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('powerof4',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='powerof5'">
                  <XSL:variable name="replace">{powerof5}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('powerof5',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('powerof5',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='powerof6'">
                  <XSL:variable name="replace">{powerof6}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('powerof6',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('powerof6',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='pprime'">
                  <XSL:variable name="replace">'''''</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('pprime',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('pprime',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='product'">
                  <XSL:variable name="replace">{product}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('product',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('product',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='proportion2'">
                  <XSL:variable name="replace">‚àù</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('proportion2',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('proportion2',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='punc'">
                  <XSL:variable name="replace">‚ñ™</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('punc',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('punc',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='punctel'">
                  <XSL:variable name="replace">{punctel}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('punctel',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('punctel',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='qprime'">
                  <XSL:variable name="replace">''''</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('qprime',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('qprime',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='quaddotl'">
                  <XSL:variable name="replace">Àô.Àô.</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('quaddotl',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('quaddotl',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='quaddotr'">
                  <XSL:variable name="replace">.Àô.Àô</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('quaddotr',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('quaddotr',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='quadrine'">
                  <XSL:variable name="replace">‚ñ°</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('quadrine',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('quadrine',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='quotient'">
                  <XSL:variable name="replace">{quotient}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('quotient',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('quotient',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='ration'">
                  <XSL:variable name="replace">‚Ñõ</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('ration',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('ration',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='rdagger'">
                  <XSL:variable name="replace">{right ‚Ä†}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('rdagger',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('rdagger',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='rdiple'">
                  <XSL:variable name="replace">‚Ä∫</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('rdiple',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('rdiple',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='repeat'">
                  <XSL:variable name="replace">{repeat}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('repeat',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('repeat',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='restdemisemiquaver'">
                  <XSL:variable name="replace">{demisemiquaver rest}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('restdemisemiquaver',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('restdemisemiquaver',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='restquaver'">
                  <XSL:variable name="replace">{quaver rest}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('restquaver',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('restquaver',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='restsemiquaver'">
                  <XSL:variable name="replace">{semiquaver rest}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('restsemiquaver',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('restsemiquaver',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='rhalfcross'">
                  <XSL:variable name="replace">‚ä£</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('rhalfcross',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('rhalfcross',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='rn1000000'">
                  <XSL:variable name="replace">{roman 1000000}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('rn1000000',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('rn1000000',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='rn500000'">
                  <XSL:variable name="replace">{roman 500000}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('rn500000',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('rn500000',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='root'">
                  <XSL:variable name="replace">‚Ñõ</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('root',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('root',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='rsect'">
                  <XSL:variable name="replace">{reversed ¬ß}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('rsect',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('rsect',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='salarmon2'">
                  <XSL:variable name="replace">‚äï</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('salarmon2',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('salarmon2',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='sharp2'">
                  <XSL:variable name="replace">‚ôØ</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('sharp2',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('sharp2',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='sharpb'">
                  <XSL:variable name="replace">{sharpb}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('sharpb',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('sharpb',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='shilling'">
                  <XSL:variable name="replace"> É</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('shilling',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('shilling',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='sloop'">
                  <XSL:variable name="replace">sÃÑ</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('sloop',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('sloop',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='spcdotb'">
                  <XSL:variable name="replace">‚Ä§</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('spcdotb',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('spcdotb',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='startq'">
                  <XSL:variable name="replace">‚Äú</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('startq',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('startq',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='stella'">
                  <XSL:variable name="replace">‚ú¥</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('stella',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('stella',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='talc'">
                  <XSL:variable name="replace">{talc}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('talc',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('talc',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='tdagger'">
                  <XSL:variable name="replace">‚Ä°Ã∂</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('tdagger',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('tdagger',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='timeimperf-prolatimperf-x'">
                  <XSL:variable name="replace">{timeimperf-prolatimperf-x}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('timeimperf-prolatimperf-x',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('timeimperf-prolatimperf-x',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='timeimperf-prolatperf-rev'">
                  <XSL:variable name="replace">{timeimperf-prolatperf-rev}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('timeimperf-prolatperf-rev',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('timeimperf-prolatperf-rev',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='timeimperf-prolatperf-rev-str'">
                  <XSL:variable name="replace">{timeimperf-prolatperf-rev-str}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('timeimperf-prolatperf-rev-str',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('timeimperf-prolatperf-rev-str',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='timeimperf-prolatperf-str'">
                  <XSL:variable name="replace">{timeimperf-prolatperf-str}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('timeimperf-prolatperf-str',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('timeimperf-prolatperf-str',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='timeperf-prolatimperf-str'">
                  <XSL:variable name="replace">{timeperf-prolatimperf-str}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('timeperf-prolatimperf-str',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('timeperf-prolatimperf-str',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='timeperf-prolatimperf-x'">
                  <XSL:variable name="replace">{timeperf-prolatimperf-x}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('timeperf-prolatimperf-x',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('timeperf-prolatimperf-x',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='timeperf-prolatperf-str'">
                  <XSL:variable name="replace">{timeperf-prolatperf-str}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('timeperf-prolatperf-str',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('timeperf-prolatperf-str',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='trefoil'">
                  <XSL:variable name="replace">‚ô£</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('trefoil',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('trefoil',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='triapost'">
                  <XSL:variable name="replace">','</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('triapost',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('triapost',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='trine'">
                  <XSL:variable name="replace">‚ñ≥</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('trine',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('trine',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='trine2'">
                  <XSL:variable name="replace">‚ä¶</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('trine2',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('trine2',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='usd5'">
                  <XSL:variable name="replace">{inverted 5}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('usd5',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('usd5',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='verdigris'">
                  <XSL:variable name="replace">{verdigris}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('verdigris',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('verdigris',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='vitriol2'">
                  <XSL:variable name="replace">{vitriol}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('vitriol2',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('vitriol2',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='vitriol3'">
                  <XSL:variable name="replace">{vitriol}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('vitriol3',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('vitriol3',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='vocaljoin'">
                  <XSL:variable name="replace">{vocal join}</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('vocaljoin',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('vocaljoin',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:when test="regex-group(1)='yhwh'">
                  <XSL:variable name="replace">◊ô◊î◊ï◊î</XSL:variable>
                  <XSL:choose>
                     <XSL:when test="not($usemarkup)">
                        <XSL:value-of select="$replace"/>
                     </XSL:when>
                     <XSL:when test="starts-with($replace,'{')">
                        <XSL:sequence select="tei:makeExpan('yhwh',translate($replace,'{}',''))"/>
                     </XSL:when>
                     <XSL:otherwise>
                        <XSL:sequence select="tei:makeG('yhwh',$replace)"/>
                     </XSL:otherwise>
                  </XSL:choose>
               </XSL:when>
               <XSL:otherwise>
                  <XSL:value-of select="."/>
               </XSL:otherwise>
            </XSL:choose>
         </XSL:matching-substring>
         <XSL:non-matching-substring>
            <XSL:value-of select="."/>
         </XSL:non-matching-substring>
      </XSL:analyze-string>
   </XSL:function>
   <XSL:function name="tei:makeG">
      <XSL:param name="char"/>
      <XSL:param name="replacement"/>
      <g ref="char:{$char}">
         <XSL:value-of select="$replacement"/>
      </g>
   </XSL:function>
   <XSL:function name="tei:makeExpan">
      <XSL:param name="char"/>
      <XSL:param name="replacement"/>
      <expan>
         <am>
            <g ref="char:{$char}"/>
         </am>
         <ex>
            <XSL:value-of select="$replacement"/>
         </ex>
      </expan>
   </XSL:function>
</XSL:stylesheet>
